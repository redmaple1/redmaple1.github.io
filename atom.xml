<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Redmaple1的博客</title>
  
  <subtitle>我的个人技术博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://redmapleren.com/"/>
  <updated>2020-01-19T09:50:38.975Z</updated>
  <id>http://redmapleren.com/</id>
  
  <author>
    <name>Xiaoya Ren</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>谈谈SpringBoot的监听器</title>
    <link href="http://redmapleren.com/2020/01/17/%E8%B0%88%E8%B0%88SpringBoot%E7%9A%84%E7%9B%91%E5%90%AC%E5%99%A8/"/>
    <id>http://redmapleren.com/2020/01/17/谈谈SpringBoot的监听器/</id>
    <published>2020-01-17T06:55:00.000Z</published>
    <updated>2020-01-19T09:50:38.975Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp;&ensp;&ensp;&ensp;最近在看SpringBoot的源码，在SpringBoot项目启动的过程中，监听器在不同阶段都会监听相应的事件，今天我们就来谈谈SpringBoot启动过程中的监听器。</p><h2 id="一、监听器扫盲"><a href="#一、监听器扫盲" class="headerlink" title="一、监听器扫盲"></a>一、监听器扫盲</h2><p>&ensp;&ensp;&ensp;&ensp;监听器模式，顾名思义就是某个对象监听某个或某些事件的触发，然后做出相应的操作。这句话可以看出，监听器模式包含几个特定的元素：  </p><ul><li>事件，即监听什么（Event）</li><li>监听者，即谁来监听（Listener）</li><li>广播器，即谁来发布事件（Multicaster）</li><li>事件触发机制，即事件什么时候发布   </li></ul><p>整体的原理如下所示。<br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/spring-boot/listener/%E7%9B%91%E5%90%AC%E5%99%A8%E6%A8%A1%E5%BC%8F.png" width="100%" height="100%"><br><br>&ensp;&ensp;&ensp;&ensp;当系统运行在某些关键节点的时候，会通过广播器去发布一些事件，而系统中存在着一些监听器，对某些事件感兴趣，去订阅这些事件。当这些事件被发布出去之后，监听器监听到这些事件，会触发一些行为。<br>&ensp;&ensp;&ensp;&ensp;;这就是监听器的简单解释，那么在SpringBoot中监听器是如何实现的呢？接下来我们就来看看吧！</p><h2 id="二、揭开面纱-深入肌理"><a href="#二、揭开面纱-深入肌理" class="headerlink" title="二、揭开面纱 深入肌理"></a>二、揭开面纱 深入肌理</h2><p>&ensp;&ensp;&ensp;&ensp;在SpringBoot中，系统<font color="#008000">监听器</font>是 ApplicationListener，可以看到源码的注释，通过实现这个接口来实现监听器。<br><figure class="highlight java"><figcaption><span>ApplicationListener.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.context;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.EventListener;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface to be implemented by application event listeners.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 通过实现这个接口来实现监听器</span></span><br><span class="line"><span class="comment"> * 这个接口是按照监听器模式的标准来设计的</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Based on the standard &#123;<span class="doctag">@code</span> java.util.EventListener&#125; interface</span></span><br><span class="line"><span class="comment"> * for the Observer design pattern.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 在Spring 3.0之后，一个应用监听器通常可以定义自己感兴趣的事件。当注册到Spring容器之后，当程序运行到一些关键节点时，</span></span><br><span class="line"><span class="comment"> * 会发出这些事件，并根据对应事件筛选出感兴趣的监听器进行触发。</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;As of Spring 3.0, an &#123;<span class="doctag">@code</span> ApplicationListener&#125; can generically declare</span></span><br><span class="line"><span class="comment"> * the event type that it is interested in. When registered with a Spring</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> ApplicationContext&#125;, events will be filtered accordingly, with the</span></span><br><span class="line"><span class="comment"> * listener getting invoked for matching event objects only.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Rod Johnson</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Juergen Hoeller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;E&gt; the specific &#123;<span class="doctag">@code</span> ApplicationEvent&#125; subclass to listen to</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.context.ApplicationEvent</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.context.event.ApplicationEventMulticaster</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.context.event.EventListener</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApplicationListener</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span>&gt; <span class="keyword">extends</span> <span class="title">EventListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Handle an application event.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> event the event to respond to</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(E event)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这个接口继承自 EventListener 接口，看源码可知 EventListener 接口就是一个接口定义，声明这是一个事件监听的接口<br><figure class="highlight java"><figcaption><span>EventListener.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A tagging interface that all event listener interfaces must extend.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EventListener</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>&ensp;&ensp;&ensp;&ensp;上面的 ApplicationListener 接口还有一个泛型，继承自 ApplicationEvent，这就是说在实现这个接口的时候，可以声明自己感兴趣的事件。系统在触发这个系统监听器的时候会根据其感兴趣的事件做一个过滤。这个接口定义了一个 onApplicationEvent 方法，是当它监听到事件发生的时候，会去做什么事情。<br>&ensp;&ensp;&ensp;&ensp;接下来我们看一下监听器模式的<font color="#008000">【广播器】</font>在SpringBoot中的实现。<br>&ensp;&ensp;&ensp;&ensp;系统广播器是 ApplicationEventMulticaster ，实现这个接口来管理一些应用监听器，并且广播事件。其中定义了添加、删除监听器的方法以及广播事件的方法。<br><figure class="highlight java"><figcaption><span>ApplicationEventMulticaster.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现这个接口来管理一些应用监听器，并且广播事件</span></span><br><span class="line"><span class="comment"> * Interface to be implemented by objects that can manage a number of</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> ApplicationListener&#125; objects and publish events to them.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;An &#123;<span class="doctag">@link</span> org.springframework.context.ApplicationEventPublisher&#125;, typically</span></span><br><span class="line"><span class="comment"> * a Spring &#123;<span class="doctag">@link</span> org.springframework.context.ApplicationContext&#125;, can use an</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> ApplicationEventMulticaster&#125; as a delegate for actually publishing events.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Rod Johnson</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Juergen Hoeller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Stephane Nicoll</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> ApplicationListener</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApplicationEventMulticaster</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Add a listener to be notified of all events.添加监听器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> listener the listener to add</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addApplicationListener</span><span class="params">(ApplicationListener&lt;?&gt; listener)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Add a listener bean to be notified of all events.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> listenerBeanName the name of the listener bean to add</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addApplicationListenerBean</span><span class="params">(String listenerBeanName)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Remove a listener from the notification list.删除监听器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> listener the listener to remove</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeApplicationListener</span><span class="params">(ApplicationListener&lt;?&gt; listener)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Remove a listener bean from the notification list.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> listenerBeanName the name of the listener bean to remove</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeApplicationListenerBean</span><span class="params">(String listenerBeanName)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Remove all listeners registered with this multicaster.移除所有监听器</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;After a remove call, the multicaster will perform no action</span></span><br><span class="line"><span class="comment"> * on event notification until new listeners are registered.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeAllListeners</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Multicast the given application event to appropriate listeners.广播事件</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Consider using &#123;<span class="doctag">@link</span> #multicastEvent(ApplicationEvent, ResolvableType)&#125;</span></span><br><span class="line"><span class="comment"> * if possible as it provides better support for generics-based events.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> event the event to multicast</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">multicastEvent</span><span class="params">(ApplicationEvent event)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Multicast the given application event to appropriate listeners.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;If the &#123;<span class="doctag">@code</span> eventType&#125; is &#123;<span class="doctag">@code</span> null&#125;, a default type is built</span></span><br><span class="line"><span class="comment"> * based on the &#123;<span class="doctag">@code</span> event&#125; instance.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> event the event to multicast</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> eventType the type of event (can be &#123;<span class="doctag">@code</span> null&#125;)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 4.2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">multicastEvent</span><span class="params">(ApplicationEvent event, @Nullable ResolvableType eventType)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>&ensp;&ensp;&ensp;&ensp;系统<font color="#008000">事件</font>在SpringBoot中的类图如下图所示。<br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/spring-boot/listener/SpringApplicationEvent%E7%B1%BB%E5%9B%BE.png" width="100%" height="100%"><br><br>&ensp;&ensp;&ensp;&ensp;最顶层是 EventObject，它代表的是一个事件对象，接着 ApplicationEvent 继承它，代表这是一个应用事件，之后SpringApplicationEvent代表了这是 Spring 中的系统事件，ApplicationStartedEvent、ApplicationFailedEvent等都是 SpringApplicationEvent 的子类。<br>&ensp;&ensp;&ensp;&ensp;上图提到了这么多的事件，那在 SpringBoot 中这些事件的发送顺序是怎样的呢？<br>&ensp;&ensp;&ensp;&ensp;下面是SpringBoot启动过程中涉及的事件触发流程图：<br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/spring-boot/listener/%E4%BA%8B%E4%BB%B6%E8%A7%A6%E5%8F%91%E9%A1%BA%E5%BA%8F.png" width="100%" height="100%"><br><br>&ensp;&ensp;&ensp;&ensp;根据上述介绍的 SpringBoot 的事件相关的接口，我们可以自己定义一些监听器，然后注册到 SpringBoot 容器中。SpringBoot本身也有一些监听器的实现，上面我们已经提到，那么这些监听器是如何注册到 SpringBoot 容器中的呢？<br>&ensp;&ensp;&ensp;&ensp;监听器注册的简明释义如下图所示，也是很容易理解的。<br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/spring-boot/listener/%E7%9B%91%E5%90%AC%E5%99%A8%E6%B3%A8%E5%86%8C%E6%B5%81%E7%A8%8B.png" width="100%" height="100%"><br><br>&ensp;&ensp;&ensp;&ensp;具体代码是如何实现的呢？<br><figure class="highlight java"><figcaption><span>SpringApplication.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create a new &#123;<span class="doctag">@link</span> SpringApplication&#125; instance. The application context will load</span></span><br><span class="line"><span class="comment"> * beans from the specified primary sources (see &#123;<span class="doctag">@link</span> SpringApplication class-level&#125;</span></span><br><span class="line"><span class="comment"> * documentation for details. The instance can be customized before calling</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #run(String...)&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> resourceLoader the resource loader to use</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> primarySources the primary bean sources</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #run(Class, String[])</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #setSources(Set)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(&#123; <span class="string">"unchecked"</span>, <span class="string">"rawtypes"</span> &#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">Assert.notNull(primarySources, <span class="string">"PrimarySources must not be null"</span>);</span><br><span class="line"><span class="keyword">this</span>.primarySources = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(Arrays.asList(primarySources));</span><br><span class="line"><span class="comment">// 根据 classpath 判断 web 应用类型</span></span><br><span class="line"><span class="keyword">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();</span><br><span class="line"><span class="comment">// 初始化 initializers 属性</span></span><br><span class="line">setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));</span><br><span class="line"><span class="comment">// 初始化 listeners 属性</span></span><br><span class="line">setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class="line"><span class="comment">// 获得是调用了哪个 main 方法</span></span><br><span class="line"><span class="keyword">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>&ensp;&ensp;&ensp;&ensp;可以看到，在 SpringApplication 的构造方法中，调用 getSpringFactoriesInstances 方法获取 ApplicationListener 的实现，然后使用 setListener 方法设置监听器到 SpringBoot 容器中。<br><figure class="highlight java"><figcaption><span>Game.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获得指定类对应的对象们</span></span><br><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">Collection&lt;T&gt; <span class="title">getSpringFactoriesInstances</span><span class="params">(Class&lt;T&gt; type)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> getSpringFactoriesInstances(type, <span class="keyword">new</span> Class&lt;?&gt;[] &#123;&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">Collection&lt;T&gt; <span class="title">getSpringFactoriesInstances</span><span class="params">(Class&lt;T&gt; type, Class&lt;?&gt;[] parameterTypes,Object... args)</span> </span>&#123;</span><br><span class="line">ClassLoader classLoader = getClassLoader();</span><br><span class="line"><span class="comment">// Use names and ensure unique to protect against duplicates</span></span><br><span class="line"><span class="comment">// 加载指定类型对应的，在 `META-INFO/spring.factories` 里的类名的数组</span></span><br><span class="line">Set&lt;String&gt; names = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(SpringFactoriesLoader.loadFactoryNames(type, classLoader));</span><br><span class="line"><span class="comment">// 创建对象们</span></span><br><span class="line">List&lt;T&gt; instances = createSpringFactoriesInstances(type, parameterTypes, classLoader, args, names);</span><br><span class="line"><span class="comment">// 排序对象们</span></span><br><span class="line">AnnotationAwareOrderComparator.sort(instances);</span><br><span class="line"><span class="keyword">return</span> instances;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>&ensp;&ensp;&ensp;&ensp;先通过 spring.factory 获得实现的类名，然后依次实例化，之后进行排序，返回结果。我们来看一下 spring.factory 中监听器的描述。<br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/spring-boot/listener/springfactories-listener.png" width="100%" height="100%"><br><br>&ensp;&ensp;&ensp;&ensp;在 getSpringFactoriesInstances 方法中打断点，可以清楚地看到，通过 spring-factories 加载这些监听器的实现的类名<br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/spring-boot/listener/springfactories%E7%9B%91%E5%90%AC%E5%99%A8debug.png" width="100%" height="100%"><br><br>&ensp;&ensp;&ensp;&ensp;监听器模式的4个要素，上面我们已经看了3个，还差一个<font color="#008000">事件触发机制</font>，我们来看一下源码吧。<br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/spring-boot/listener/run-listener%E6%97%B6%E6%9C%BA.png" width="100%" height="100%"><br><br>&ensp;&ensp;&ensp;&ensp;上图圈中的部分，通过 SpringApplicationRunListener 数组 listeners 直接或进入方法触发事件。下面我们来具体看一下第一个 starting 事件。<br>&ensp;&ensp;&ensp;&ensp;进入 starting 方法内部，可以看到它是遍历调用 SpringApplicationRunListener 的 starting方法。<br><figure class="highlight java"><figcaption><span>SpringApplicationRunListener.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">starting</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (SpringApplicationRunListener listener : <span class="keyword">this</span>.listeners) &#123;</span><br><span class="line">listener.starting();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这个 SpringApplicationRunListener 中定义了各个阶段的事件，比如 starting、environmentPrepared、contextPrepared等等。<br><figure class="highlight java"><figcaption><span>SpringApplicationRunListener.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Listener for the &#123;<span class="doctag">@link</span> SpringApplication&#125; &#123;<span class="doctag">@code</span> run&#125; method.</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> SpringApplicationRunListener&#125;s are loaded via the &#123;<span class="doctag">@link</span> SpringFactoriesLoader&#125;</span></span><br><span class="line"><span class="comment"> * and should declare a public constructor that accepts a &#123;<span class="doctag">@link</span> SpringApplication&#125;</span></span><br><span class="line"><span class="comment"> * instance and a &#123;<span class="doctag">@code</span> String[]&#125; of arguments. A new</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> SpringApplicationRunListener&#125; instance will be created for each run.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Phillip Webb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dave Syer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Andy Wilkinson</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SpringApplicationRunListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Called immediately when the run method has first started. Can be used for very</span></span><br><span class="line"><span class="comment"> * early initialization.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">starting</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Called once the environment has been prepared, but before the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> ApplicationContext&#125; has been created.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> environment the environment</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">environmentPrepared</span><span class="params">(ConfigurableEnvironment environment)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Called once the &#123;<span class="doctag">@link</span> ApplicationContext&#125; has been created and prepared, but</span></span><br><span class="line"><span class="comment"> * before sources have been loaded.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> context the application context</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">contextPrepared</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Called once the application context has been loaded but before it has been</span></span><br><span class="line"><span class="comment"> * refreshed.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> context the application context</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">contextLoaded</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The context has been refreshed and the application has started but</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> CommandLineRunner CommandLineRunners&#125; and &#123;<span class="doctag">@link</span> ApplicationRunner</span></span><br><span class="line"><span class="comment"> * ApplicationRunners&#125; have not been called.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> context the application context.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">started</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Called immediately before the run method finishes, when the application context has</span></span><br><span class="line"><span class="comment"> * been refreshed and all &#123;<span class="doctag">@link</span> CommandLineRunner CommandLineRunners&#125; and</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> ApplicationRunner ApplicationRunners&#125; have been called.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> context the application context.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">running</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Called when a failure occurs when running the application.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> context the application context or &#123;<span class="doctag">@code</span> null&#125; if a failure occurred before</span></span><br><span class="line"><span class="comment"> * the context was created</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> exception the failure</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">failed</span><span class="params">(ConfigurableApplicationContext context, Throwable exception)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>&ensp;&ensp;&ensp;&ensp;因为这个类定义了 SpringBoot 启动过程中各个阶段的事件，所以只用调用这个类的不同方法就可以在相应的节点触发对应的事件。<br>在 starting 方法内部，其实也很简单，就是调用了广播器的 multicastEvent 方法发送一个相应的 ApplicationStartingEvent 事件。<br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/spring-boot/listener/starting%E8%B0%83%E7%94%A8%E5%B9%BF%E6%92%AD%E5%99%A8.png" width="100%" height="100%"><br><br>&ensp;&ensp;&ensp;&ensp;SpringBoot容器通过这种机制，使监听器的内部实现与外部调用隔离开来。SpringBoot 容器在运行阶段，只需要调用这个类的各个关键方法就可以了，不需要 SpringBoot 容器自己去构造相应的事件来发送。<br>&ensp;&ensp;&ensp;&ensp;我们进入广播器的 multicastEvent 方法内部。<br><figure class="highlight java"><figcaption><span>SimpleApplicationEventMulticaster.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">multicastEvent</span><span class="params">(ApplicationEvent event)</span> </span>&#123;</span><br><span class="line">multicastEvent(event, resolveDefaultEventType(event));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">multicastEvent</span><span class="params">(<span class="keyword">final</span> ApplicationEvent event, @Nullable ResolvableType eventType)</span> </span>&#123;</span><br><span class="line"><span class="comment">//对 eventType 做了一层包装</span></span><br><span class="line">       ResolvableType type = (eventType != <span class="keyword">null</span> ? eventType : resolveDefaultEventType(event));</span><br><span class="line"><span class="comment">//获取线程池</span></span><br><span class="line">       Executor executor = getTaskExecutor();</span><br><span class="line">       <span class="comment">//获取对当前事件感兴趣的监听器列表，然后遍历</span></span><br><span class="line"><span class="keyword">for</span> (ApplicationListener&lt;?&gt; listener : getApplicationListeners(event, type)) &#123;</span><br><span class="line"><span class="keyword">if</span> (executor != <span class="keyword">null</span>) &#123;</span><br><span class="line">executor.execute(() -&gt; invokeListener(listener, event));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">invokeListener(listener, event);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> ResolvableType <span class="title">resolveDefaultEventType</span><span class="params">(ApplicationEvent event)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ResolvableType.forInstance(event);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>&ensp;&ensp;&ensp;&ensp;上述方法中 getApplicationListeners 方法是获取对当前事件感兴趣的监听器列表。我们看一下源码，是如何实现的。<br><figure class="highlight java"><figcaption><span>AbstractApplicationEventMulticaster.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return a Collection of ApplicationListeners matching the given</span></span><br><span class="line"><span class="comment"> * event type. Non-matching listeners get excluded early.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> event the event to be propagated. Allows for excluding</span></span><br><span class="line"><span class="comment"> * non-matching listeners early, based on cached matching information.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> eventType the event type</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a Collection of ApplicationListeners</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.context.ApplicationListener</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> Collection&lt;ApplicationListener&lt;?&gt;&gt; getApplicationListeners(</span><br><span class="line">ApplicationEvent event, ResolvableType eventType) &#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//首先先获取事件的源 source，也就是 SpringApplication</span></span><br><span class="line">Object source = event.getSource();</span><br><span class="line">       <span class="comment">//获得source的class type</span></span><br><span class="line">Class&lt;?&gt; sourceType = (source != <span class="keyword">null</span> ? source.getClass() : <span class="keyword">null</span>);</span><br><span class="line">       <span class="comment">//通过sourceType和eventType构造一个缓存key。</span></span><br><span class="line">       <span class="comment">//目的是若当前已经获得过对当前事件感兴趣的监听器列表，则从缓存中读取，不必再重新进行计算哪些监听器对该事件感兴趣，提升了效率</span></span><br><span class="line">ListenerCacheKey cacheKey = <span class="keyword">new</span> ListenerCacheKey(eventType, sourceType);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Quick check for existing entry on ConcurrentHashMap...</span></span><br><span class="line">ListenerRetriever retriever = <span class="keyword">this</span>.retrieverCache.get(cacheKey);</span><br><span class="line">       <span class="comment">//第一次调用的话retriever为null</span></span><br><span class="line"><span class="keyword">if</span> (retriever != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> retriever.getApplicationListeners();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//beanClassLoader为null，进入if条件内</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.beanClassLoader == <span class="keyword">null</span> ||</span><br><span class="line">(ClassUtils.isCacheSafe(event.getClass(), <span class="keyword">this</span>.beanClassLoader) &amp;&amp;</span><br><span class="line">(sourceType == <span class="keyword">null</span> || ClassUtils.isCacheSafe(sourceType, <span class="keyword">this</span>.beanClassLoader)))) &#123;</span><br><span class="line"><span class="comment">// Fully synchronized building and caching of a ListenerRetriever</span></span><br><span class="line">               <span class="comment">//同步块</span></span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>.retrievalMutex) &#123;</span><br><span class="line">                   <span class="comment">//进入同步块，先从缓存中获取retriever</span></span><br><span class="line">retriever = <span class="keyword">this</span>.retrieverCache.get(cacheKey);</span><br><span class="line">               <span class="comment">//缓存中retriever不为null，直接返回retriever的获取监听器方法</span></span><br><span class="line"><span class="keyword">if</span> (retriever != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> retriever.getApplicationListeners();</span><br><span class="line">&#125;</span><br><span class="line">               <span class="comment">//缓存retriever为null，创建ListenerRetriever实例</span></span><br><span class="line">retriever = <span class="keyword">new</span> ListenerRetriever(<span class="keyword">true</span>);</span><br><span class="line">               <span class="comment">//调用retrieveApplicationListeners方法，检索监听器</span></span><br><span class="line">Collection&lt;ApplicationListener&lt;?&gt;&gt; listeners =</span><br><span class="line">retrieveApplicationListeners(eventType, sourceType, retriever);</span><br><span class="line">               <span class="comment">//将检索到的retriever放进缓存中        </span></span><br><span class="line"><span class="keyword">this</span>.retrieverCache.put(cacheKey, retriever);</span><br><span class="line">               <span class="comment">//返回监听器列表</span></span><br><span class="line"><span class="keyword">return</span> listeners;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// No ListenerRetriever caching -&gt; no synchronization necessary</span></span><br><span class="line"><span class="keyword">return</span> retrieveApplicationListeners(eventType, sourceType, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>&ensp;&ensp;&ensp;&ensp;retrieveApplicationListeners 方法是如何检索监听器呢？我们继续来看。<br><figure class="highlight java"><figcaption><span>AbstractApplicationEventMulticaster.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Actually retrieve the application listeners for the given event and source type.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> eventType the event type</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sourceType the event source type</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> retriever the ListenerRetriever, if supposed to populate one (for caching purposes)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the pre-filtered list of application listeners for the given event and source type</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Collection&lt;ApplicationListener&lt;?&gt;&gt; retrieveApplicationListeners(</span><br><span class="line">ResolvableType eventType, <span class="meta">@Nullable</span> Class&lt;?&gt; sourceType, <span class="meta">@Nullable</span> ListenerRetriever retriever) &#123;</span><br><span class="line"></span><br><span class="line">List&lt;ApplicationListener&lt;?&gt;&gt; allListeners = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">Set&lt;ApplicationListener&lt;?&gt;&gt; listeners;</span><br><span class="line">Set&lt;String&gt; listenerBeans;</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>.retrievalMutex) &#123;</span><br><span class="line">           <span class="comment">//获得默认的applicationListeners和applicationLIstenerBeans</span></span><br><span class="line">           <span class="comment">//applicationListeners就是上文提到spring.factories加载进来的listener的实现</span></span><br><span class="line">listeners = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(<span class="keyword">this</span>.defaultRetriever.applicationListeners);</span><br><span class="line">listenerBeans = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(<span class="keyword">this</span>.defaultRetriever.applicationListenerBeans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add programmatically registered listeners, including ones coming</span></span><br><span class="line"><span class="comment">// from ApplicationListenerDetector (singleton beans and inner beans).</span></span><br><span class="line">       <span class="comment">//遍历监听器</span></span><br><span class="line"><span class="keyword">for</span> (ApplicationListener&lt;?&gt; listener : listeners) &#123;</span><br><span class="line">           <span class="comment">//依次判断，当前监听器是否对该事件感兴趣</span></span><br><span class="line"><span class="keyword">if</span> (supportsEvent(listener, eventType, sourceType)) &#123;</span><br><span class="line">               <span class="comment">//若感兴趣，会加入到集合中</span></span><br><span class="line"><span class="keyword">if</span> (retriever != <span class="keyword">null</span>) &#123;</span><br><span class="line">retriever.applicationListeners.add(listener);</span><br><span class="line">&#125;</span><br><span class="line">allListeners.add(listener);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add listeners by bean name, potentially overlapping with programmatically</span></span><br><span class="line"><span class="comment">// registered listeners above - but here potentially with additional metadata.</span></span><br><span class="line"><span class="keyword">if</span> (!listenerBeans.isEmpty()) &#123;</span><br><span class="line">ConfigurableBeanFactory beanFactory = getBeanFactory();</span><br><span class="line"><span class="keyword">for</span> (String listenerBeanName : listenerBeans) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (supportsEvent(beanFactory, listenerBeanName, eventType)) &#123;</span><br><span class="line">ApplicationListener&lt;?&gt; listener =</span><br><span class="line">beanFactory.getBean(listenerBeanName, ApplicationListener.class);</span><br><span class="line"><span class="keyword">if</span> (!allListeners.contains(listener) &amp;&amp; supportsEvent(listener, eventType, sourceType)) &#123;</span><br><span class="line"><span class="keyword">if</span> (retriever != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (beanFactory.isSingleton(listenerBeanName)) &#123;</span><br><span class="line">retriever.applicationListeners.add(listener);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">retriever.applicationListenerBeans.add(listenerBeanName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">allListeners.add(listener);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Remove non-matching listeners that originally came from</span></span><br><span class="line"><span class="comment">// ApplicationListenerDetector, possibly ruled out by additional</span></span><br><span class="line"><span class="comment">// BeanDefinition metadata (e.g. factory method generics) above.</span></span><br><span class="line">Object listener = beanFactory.getSingleton(listenerBeanName);</span><br><span class="line"><span class="keyword">if</span> (retriever != <span class="keyword">null</span>) &#123;</span><br><span class="line">retriever.applicationListeners.remove(listener);</span><br><span class="line">&#125;</span><br><span class="line">allListeners.remove(listener);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;</span><br><span class="line"><span class="comment">// Singleton listener instance (without backing bean definition) disappeared -</span></span><br><span class="line"><span class="comment">// probably in the middle of the destruction phase</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//对监听器通过order值进行排序</span></span><br><span class="line">AnnotationAwareOrderComparator.sort(allListeners);</span><br><span class="line"><span class="keyword">if</span> (retriever != <span class="keyword">null</span> &amp;&amp; retriever.applicationListenerBeans.isEmpty()) &#123;</span><br><span class="line">retriever.applicationListeners.clear();</span><br><span class="line">retriever.applicationListeners.addAll(allListeners);</span><br><span class="line">&#125;</span><br><span class="line">       <span class="comment">//将集合返回</span></span><br><span class="line"><span class="keyword">return</span> allListeners;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>&ensp;&ensp;&ensp;&ensp;上面方法中 supportsEvent 方法是如何判断是否感兴趣呢？我们来打断点看一下。<br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/spring-boot/listener/supportEvent-cloudFoundry.png" width="100%" height="100%"><br><br>&ensp;&ensp;&ensp;&ensp;首先进入的是 CloudFoundryVcapEnvironmentPostProcessor，该类不是 GenericApplicationListener 的子类，所以会为该类创建一个GenericApplicationListenerAdapter，作为smartListener。断点进入GenericApplicationListenerAdapter中，可以看到，delegate就是CloudFoundryVcapEnvironmentPostProcessor，接着会调用resolveDeclaredEventType方法，来计算当前代理类对哪个事件感兴趣。<br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/spring-boot/listener/listenerAdapter-cloudFoundry.png" width="100%" height="100%"><br><br>&ensp;&ensp;&ensp;&ensp;这个resolveDeclaredEventType方法，是spring内部实现的一个泛型解析器，会根据类定义获得该类声明的事件类型，由于CloudFoundryVcapEnvironmentPostProcessor类实现ApplicationListener，泛型是ApplicationPreparedEvent。<br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/spring-boot/listener/cloudFoundry%E6%B3%9B%E5%9E%8B.png" width="100%" height="100%"><br><br>&ensp;&ensp;&ensp;&ensp;所以该方法就会获得 ApplicationPreparedEvent。<br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/spring-boot/listener/resolveType-cloudFoundry.png" width="100%" height="100%"><br><br>&ensp;&ensp;&ensp;&ensp;接着会调用 smartListener 的 supportsEventType 方法，判断是否支持该事件。进入方法，首先判断该类是否是 SmartApplicationListener 的子类，通过上面 CloudFoundryVcapEnvironmentPostProcessor 的定义，它不是 SmartApplicationListener 的子类，所以会进入 else 中。<br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/spring-boot/listener/supportEventType-cloudFoundry.png" width="100%" height="100%"><br><br>&ensp;&ensp;&ensp;&ensp;上面得到 declaredEventType 是 ApplicationPreparedEvent ，所以不为null。当前 eventType 是 ApplicationStartingEvent，显然“||”后半部分结果也是false，所以 smartListener.supportsEventType 是false，因为supportsEvent方法后面条件是“&amp;&amp;”，所以后面的内容不必在意，可以直接确定该监听器不支持该事件。<br>&ensp;&ensp;&ensp;&ensp;我们接着调试，接下来进入的是 ConfigFileApplicationListener，按照上述同样的方法进行计算，由于它是 SmartApplicationListener 的子类。<br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/spring-boot/listener/configFile%E5%AE%9A%E4%B9%89.png" width="100%" height="100%"><br><br>&ensp;&ensp;&ensp;&ensp;所以会进入 if 条件内<br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/spring-boot/listener/configFile%E8%BF%9B%E5%85%A5if.png" width="100%" height="100%"><br><br>&ensp;&ensp;&ensp;&ensp;这里会调用实现类的 supportEvent 方法，即 ConfigFileApplicationListener 类的 supportsEventType 方法。<br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/spring-boot/listener/configFile%E5%86%85%E9%83%A8supportEventType.png" width="100%" height="100%"><br><br>&ensp;&ensp;&ensp;&ensp;判断当前这个event是否是 ApplicationEnvironmentPreparedEvent，或者是否是 ApplicationPreparedEvent，都不是的话，会返回false，也就是说对该事件不感兴趣，所以不会将 ConfigFileApplicationListener 添加到上述的感兴趣监听器列表中。<br>&ensp;&ensp;&ensp;&ensp;通过以上的方法，就检索出了哪些监听器对当前事件感兴趣。<br>&ensp;&ensp;&ensp;&ensp;之后在遍历这些监听器的过程中，会调用 invokeListener 方法<br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/spring-boot/listener/multicastEvent-else.png" width="100%" height="100%"><br><br>&ensp;&ensp;&ensp;&ensp;invokeListener方法中会调用doInvokeListener方法，最终我们可以看到listener.onApplicationEvent，这里会进入具体事件的触发<br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/spring-boot/listener/doInvokeListener%E6%96%AD%E7%82%B9.png" width="100%" height="100%"><br><br>&ensp;&ensp;&ensp;&ensp;以 ConfigFileApplicationListener 为例，会根据不同的event触发不同的事件。<br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/spring-boot/listener/configFile-onApplicationEvent.png" width="100%" height="100%"><br><br>&ensp;&ensp;&ensp;&ensp;通过上面的分析，总结一下获取监听器列表逻辑，如下图所示。<br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/spring-boot/listener/%E8%8E%B7%E5%8F%96%E7%9B%91%E5%90%AC%E5%99%A8%E5%88%97%E8%A1%A8%E6%B5%81%E7%A8%8B.png" width="40%" height="60%"><br><br>&ensp;&ensp;&ensp;&ensp;其中supportsEvent流程如下图所示。<br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/spring-boot/listener/%E8%A7%A6%E5%8F%91%E6%9D%A1%E4%BB%B6%E6%B5%81%E7%A8%8B.png" width="100%" height="100%"><br>  </p><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>&ensp;&ensp;&ensp;&ensp;以上关于SpringBoot中监听器的主要核心方法的实现我们已经一点点看过了，看上去很复杂，但是实际上还是按照标准的监听器模式实现的。其中将一系列事件的触发方法封装在一个runListener中，降低了系统的耦合度，使得调用的时候也变得很轻松，这一点很值得我们学习。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;最近在看SpringBoot的源码，在SpringBoot项目启动的过程中，监听器在不同阶段都会监听相应的事件，今天我们就来谈谈SpringBoot启动过程中的监听器。&lt;/p&gt;
&lt;h2 id=&quot;一、监听器扫盲&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="SpringBoot" scheme="http://redmapleren.com/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://redmapleren.com/tags/SpringBoot/"/>
    
      <category term="源码" scheme="http://redmapleren.com/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>基础加固-建造者模式</title>
    <link href="http://redmapleren.com/2019/07/09/%E5%9F%BA%E7%A1%80%E5%8A%A0%E5%9B%BA-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://redmapleren.com/2019/07/09/基础加固-建造者模式/</id>
    <published>2019-07-09T03:30:00.000Z</published>
    <updated>2019-07-10T07:33:01.383Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp;&ensp;&ensp;上篇我们复习了工厂模式，这节我们来看一下创建型设计模式的另一种模式–建造者模式。  </p><h2 id="一-定义"><a href="#一-定义" class="headerlink" title="一.定义"></a>一.定义</h2><p>&ensp;&ensp;&ensp;建造者模式是指将一个复杂对象的构建和它的表示分离，使同样的构建过程可以构建不同的表示。用户只需要指定需要建造的类型就可以得到它们，建造过程以及细节并不需要知道。适用于那些创建流程固定，但顺序不一定固定的对象。如果一个对象有非常复杂的内部结构，即有很多属性，我们想把这种复杂对象的创建和使用进行分离，我们可以使用建造者模式。这样看定义难免抽象，接下来我们一起编写代码来加深对工厂模式的理解。  </p><h2 id="二、标准版"><a href="#二、标准版" class="headerlink" title="二、标准版"></a>二、标准版</h2><h3 id="1-代码实现"><a href="#1-代码实现" class="headerlink" title="1.代码实现"></a>1.代码实现</h3><p>&ensp;&ensp;&ensp;首先我们有一个类Game，有名称、简介、制作团队、宣传视频、社区几个属性。代码如下：<br><figure class="highlight java"><figcaption><span>Game.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String introduce;</span><br><span class="line">    <span class="keyword">private</span> String team;</span><br><span class="line">    <span class="keyword">private</span> String video;</span><br><span class="line">    <span class="keyword">private</span> String community;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getIntroduce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> introduce;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIntroduce</span><span class="params">(String introduce)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.introduce = introduce;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTeam</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> team;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTeam</span><span class="params">(String team)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.team = team;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getVideo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> video;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVideo</span><span class="params">(String video)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.video = video;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCommunity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> community;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommunity</span><span class="params">(String community)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.community = community;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Game&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", introduce='"</span> + introduce + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", team='"</span> + team + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", video='"</span> + video + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", community='"</span> + community + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </p><p>我们创建一个抽象类GameBuilder，其中定义了创建各个属性的方法和生成Game对象的方法，代码如下：<br><figure class="highlight java"><figcaption><span>GameBuilder.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">GameBuilder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildIntroduce</span><span class="params">(String introduce)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildTeam</span><span class="params">(String team)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildVideo</span><span class="params">(String video)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildCommunity</span><span class="params">(String community)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Game <span class="title">makeGame</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </p><p>接下来我们要创建具体的builder实现，比如我们要创建一个动作游戏的建造者ActionGameBuilder，我们只需要继承上面的抽象builder，重写里面的方法即可，代码如下：<br><figure class="highlight java"><figcaption><span>ActionGameBuilder.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActionGameBuilder</span> <span class="keyword">extends</span> <span class="title">GameBuilder</span> </span>&#123;</span><br><span class="line">    Game game = <span class="keyword">new</span> Game();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        game.setName(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildIntroduce</span><span class="params">(String introduce)</span> </span>&#123;</span><br><span class="line">        game.setIntroduce(introduce);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildTeam</span><span class="params">(String team)</span> </span>&#123;</span><br><span class="line">        game.setTeam(team);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildVideo</span><span class="params">(String video)</span> </span>&#123;</span><br><span class="line">        game.setVideo(video);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildCommunity</span><span class="params">(String community)</span> </span>&#123;</span><br><span class="line">        game.setCommunity(community);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Game <span class="title">makeGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> game;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </p><p>其实现在我们已经可以使用我们创建的builder进行创建游戏了，不过这里可以定义一个管理角色的对象，对builder进行管理，用它来进行管理对象的创建，这里我们定义一个游戏经理类GameManager。<br><figure class="highlight java"><figcaption><span>GameManager.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GameManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> GameBuilder gameBuilder;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGameBuilder</span><span class="params">(GameBuilder gameBuilder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gameBuilder = gameBuilder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Game <span class="title">makeGame</span><span class="params">(String name, String introduce, String team, String video, String community)</span> </span>&#123;</span><br><span class="line">        gameBuilder.buildName(name);</span><br><span class="line">        gameBuilder.buildIntroduce(introduce);</span><br><span class="line">        gameBuilder.buildTeam(team);</span><br><span class="line">        gameBuilder.buildVideo(video);</span><br><span class="line">        gameBuilder.buildCommunity(community);</span><br><span class="line">        <span class="keyword">return</span> gameBuilder.makeGame();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>写到这里我们已经完成了一个标准的建造者模式代码，写一个测试类来测试一下。<br><figure class="highlight java"><figcaption><span>Test.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GameBuilder gameBuilder = <span class="keyword">new</span> ActionGameBuilder();</span><br><span class="line"></span><br><span class="line">        GameManager manager = <span class="keyword">new</span> GameManager();</span><br><span class="line">        manager.setGameBuilder(gameBuilder);</span><br><span class="line"></span><br><span class="line">        Game game = manager.makeGame(<span class="string">"游戏名称"</span>,</span><br><span class="line">                <span class="string">"这是一个很好玩的动作游戏"</span>,</span><br><span class="line">                <span class="string">"制作团队"</span>,</span><br><span class="line">                <span class="string">"游戏宣传视频"</span>,</span><br><span class="line">                <span class="string">"游戏社区"</span>);</span><br><span class="line">        System.out.println(game);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>控制台可以看到创建的游戏信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Game&#123;name=&apos;游戏名称&apos;, introduce=&apos;这是一个很好玩的动作游戏&apos;, team=&apos;制作团队&apos;, video=&apos;游戏宣传视频&apos;, community=&apos;游戏社区&apos;&#125;</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>   </p><h3 id="2-UML"><a href="#2-UML" class="headerlink" title="2.UML"></a>2.UML</h3><p>&ensp;&ensp;&ensp;我们可以看到标准的建造者模式的UML类图。<br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/design_pattern/BuilderStandardUML.png" width="50%" height="50%"><br>我们测试时通过游戏经理和动作游戏建造者创建了含有较多属性的游戏类，并不关心创建的过程和顺序，有很好的封装性，使创建和使用分离，并且有很好的扩展性，建造类之间独立，在一定程度上解耦。</p><h2 id="三、演进版"><a href="#三、演进版" class="headerlink" title="三、演进版"></a>三、演进版</h2><h3 id="1-代码实现-1"><a href="#1-代码实现-1" class="headerlink" title="1.代码实现"></a>1.代码实现</h3><p>&ensp;&ensp;&ensp;更多时候我们需要一种可以链式调用的形式进行建造我们的对象，实现其实也很简单，我们可以创建一个静态内部类作为对象的builder，具体代码如下：<br><figure class="highlight java"><figcaption><span>Game.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String introduce;</span><br><span class="line">    <span class="keyword">private</span> String team;</span><br><span class="line">    <span class="keyword">private</span> String video;</span><br><span class="line">    <span class="keyword">private</span> String community;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Game</span><span class="params">(GameBuilder gameBuilder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = gameBuilder.name;</span><br><span class="line">        <span class="keyword">this</span>.introduce = gameBuilder.introduce;</span><br><span class="line">        <span class="keyword">this</span>.team = gameBuilder.team;</span><br><span class="line">        <span class="keyword">this</span>.video = gameBuilder.video;</span><br><span class="line">        <span class="keyword">this</span>.community = gameBuilder.community;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Game&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", introduce='"</span> + introduce + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", team='"</span> + team + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", video='"</span> + video + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", community='"</span> + community + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">GameBuilder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> String introduce;</span><br><span class="line">        <span class="keyword">private</span> String team;</span><br><span class="line">        <span class="keyword">private</span> String video;</span><br><span class="line">        <span class="keyword">private</span> String community;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> GameBuilder <span class="title">buildName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> GameBuilder <span class="title">buildIntroduce</span><span class="params">(String introduce)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.introduce = introduce;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> GameBuilder <span class="title">buildTeam</span><span class="params">(String team)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.team = team;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> GameBuilder <span class="title">buildVideo</span><span class="params">(String video)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.video = video;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> GameBuilder <span class="title">buildCommunity</span><span class="params">(String community)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.community = community;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Game <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Game(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>&ensp;&ensp;&ensp;跟标准版本不同的是，在builder中的buildXxx方法返回的是builder本身，这样我们就可以使用链式调用的方式进行创建，最后调用build方法返回我们的实体类。写一个测试类测试一下。<br><figure class="highlight java"><figcaption><span>Test.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Game game = <span class="keyword">new</span> Game.GameBuilder().buildName(<span class="string">"游戏名称"</span>)</span><br><span class="line">                .buildIntroduce(<span class="string">"这是一个很好玩的游戏"</span>)</span><br><span class="line">                .buildTeam(<span class="string">"制作团队"</span>)</span><br><span class="line">                .buildVideo(<span class="string">"介绍视频"</span>)</span><br><span class="line">                .buildCommunity(<span class="string">"游戏社区"</span>)</span><br><span class="line">                .build();</span><br><span class="line">        System.out.println(game);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>执行程序，可以看到我们创建的game的信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Game&#123;name=&apos;游戏名称&apos;, introduce=&apos;这是一个很好玩的游戏&apos;, team=&apos;制作团队&apos;, video=&apos;介绍视频&apos;, community=&apos;游戏社区&apos;&#125;</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>  </p><h3 id="2-UML-1"><a href="#2-UML-1" class="headerlink" title="2.UML"></a>2.UML</h3><p>&ensp;&ensp;&ensp;演进版本的UML类图更加简单，可以很清楚地看到，对于应用方，只需要使用对象的builder进行链式调用，最后调用build方法返回所需的对象实例即可。<br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/design_pattern/BuilderV2UML.png" width="50%" height="50%">   </p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>&ensp;&ensp;&ensp;以上介绍了两个版本的建造者模式的实现，总体来说都是比较简单，容易理解的。在日常应用中，第二种是比较常用的，各种开源框架也都广泛使用，比如Guava中CacheBuilder，都是通过第二种链式调用的方式创建对象，使用方便。对于以后的扩展维护也比较方便。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;上篇我们复习了工厂模式，这节我们来看一下创建型设计模式的另一种模式–建造者模式。  &lt;/p&gt;
&lt;h2 id=&quot;一-定义&quot;&gt;&lt;a href=&quot;#一-定义&quot; class=&quot;headerlink&quot; title=&quot;一.定义&quot;&gt;&lt;/a&gt;一.定义&lt;/
      
    
    </summary>
    
      <category term="设计模式" scheme="http://redmapleren.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="基础" scheme="http://redmapleren.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="设计模式" scheme="http://redmapleren.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>基础加固-工厂模式</title>
    <link href="http://redmapleren.com/2019/06/27/%E5%9F%BA%E7%A1%80%E5%8A%A0%E5%9B%BA-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://redmapleren.com/2019/06/27/基础加固-工厂模式/</id>
    <published>2019-06-27T06:00:00.000Z</published>
    <updated>2019-07-02T06:31:50.671Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp;&ensp;&ensp;随着工作年限的增加，对工作中的代码结构和质量的追求也在增加。之前看书学习过的设计模式，当时也就是看看，看过或许有的忘记，或许不会使用。入职新公司以来，看团队高级工程师的代码，为了实现一个需求，可以使用合适的设计模式去规范代码，使代码的可读性和可扩展性都大大提升，我意识到是时候巩固一下基础，系统学习一下设计模式了。从这边文章开始，我将从创建型模式中的工厂模式开始复习，实现简单的demo，对比各个模式的UML类图，希望提升自己的编码能力，同时也便于阅读各种开源框架的源码。闲话少许，我们开始吧~  </p><h2 id="一、简单工厂模式"><a href="#一、简单工厂模式" class="headerlink" title="一、简单工厂模式"></a>一、简单工厂模式</h2><h3 id="1-问题引入"><a href="#1-问题引入" class="headerlink" title="1.问题引入"></a>1.问题引入</h3><p>&ensp;&ensp;&ensp;首先来看一个场景，我有一个抽象类Game，标识这个类为一个游戏，游戏可以有很多种，比如“马里奥”、“塞尔达”等等。创建一个具体的游戏，一种最简单的方式就是创建一个具体游戏类继承Game抽象类，然后重写里面的建造方法。代码如下：<br><figure class="highlight java"><figcaption><span>Game.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </p><p>Mario游戏<br><figure class="highlight java"><figcaption><span>MarioGame.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MarioGame</span> <span class="keyword">extends</span> <span class="title">Game</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Mario game produced!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </p><p>Zelda游戏<br><figure class="highlight java"><figcaption><span>ZeldaGame.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZeldaGame</span> <span class="keyword">extends</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Zelda game produced!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这样我们在需要创建某种游戏的时候，直接new对应的具体游戏类,调用其中的建造方法即可。<br><figure class="highlight java"><figcaption><span>ZeldaGame.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Game game = <span class="keyword">new</span> MarioGame();</span><br><span class="line">        game.produce();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>可以看到控制台中打印的结果，创建了Mario游戏<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Mario game produced!</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><br>&ensp;&ensp;&ensp;看到这里，大家肯定已经发现了这种写法的弊端。每次需要直接new出来想要的具体游戏类，我们如果能使用一个工具去创建我们想要的具体游戏类，不需要关心创建的过程，那岂不是很爽吗？这时候简单工厂模式就登场了。  </p><h3 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2.代码实现"></a>2.代码实现</h3><p>&ensp;&ensp;&ensp;和上面一样，还是有我们的抽象游戏Game类，不同的游戏去继承Game类，实现自己的produce方法。不同的是，这次我们创建一个简单工厂类GameFactory，根据参数通过这个工厂去创建我们需要的具体游戏类。具体代码如下：<br><figure class="highlight java"><figcaption><span>GameFactory.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GameFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Game <span class="title">getGame</span><span class="params">(String type)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"mario"</span>.equalsIgnoreCase(type))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MarioGame();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"zelda"</span>.equalsIgnoreCase(type))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ZeldaGame();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这样，我们在使用工厂类创建具体游戏类的时候就不用直接new出来具体的游戏，直接使用工厂类就可以了。<br><figure class="highlight java"><figcaption><span>GameFactory.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GameFactory gameFactory = <span class="keyword">new</span> GameFactory();</span><br><span class="line">        Game game = gameFactory.getGame(<span class="string">"zelda"</span>);</span><br><span class="line">        <span class="keyword">if</span> (game == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        game.produce();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>结果如下，我们成功创建了zelda游戏<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Zelda game produced!</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>  </p><h3 id="3-UML"><a href="#3-UML" class="headerlink" title="3.UML"></a>3.UML</h3><p>我们先看一下未引入简单工厂时候的UML类图。<br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/design_pattern/GameOriginUML.png" width="50%" height="50%"><br>&ensp;&ensp;&ensp;可以看到我们创建Mario和Zelda两个游戏，都分别通过具体的类进行创建，以后如果要创建更多的游戏，那时的UML大家应该可以想象，从应用方向不同的具体游戏类都会有create联系，整个关系就非常杂乱。我们使用了简单工厂模式之后的UML是什么样的呢？<br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/design_pattern/GameSimpleFactoryUML.png" width="50%" height="50%">  </p><p>&ensp;&ensp;&ensp;这样应用方使用简单工厂创建不同的游戏时，只需要告诉工厂我需要什么游戏即可，就不必关心我应该具体new什么游戏了。<br>&ensp;&ensp;&ensp;当然这里实现的简单工厂是最简单的形式，其实完全可以在工厂类中使用java反射创建不同的游戏，在应用方使用的时候，传入对应的Class即可  </p><h2 id="二、工厂方法模式"><a href="#二、工厂方法模式" class="headerlink" title="二、工厂方法模式"></a>二、工厂方法模式</h2><h3 id="1-问题引入-1"><a href="#1-问题引入-1" class="headerlink" title="1.问题引入"></a>1.问题引入</h3><p>&ensp;&ensp;&ensp;通过上面简单工厂模式，我们已经可以通过工厂来创建具体的对象。但是这时候我需要增加一个新的“精灵宝可梦”的游戏，我们怎么操作呢？也很简单，新建一个Pokemon游戏的类继承Game，实现自己的produce方法，在工厂类中修改逻辑，使工厂可以创建新的游戏。你可能会说，这样也很好啊，创建新游戏的时候我只需要去改工厂里的逻辑就好了，但是当类越来越多，逻辑越来越复杂，你的工厂类就会变得特别庞大，每次创建新的游戏都要修改这个工厂类，是不符合软件设计中的开闭原则的。这时候，如果按不同游戏的类型把工厂分为不同的工厂，创建的时候只需要使用对应的工厂生产我们需要的游戏就好了。  </p><h3 id="2-代码实现-1"><a href="#2-代码实现-1" class="headerlink" title="2.代码实现"></a>2.代码实现</h3><p>&ensp;&ensp;&ensp;首先我们新创建“精灵宝可梦”游戏类，同样让它继承Game。<br><figure class="highlight java"><figcaption><span>PokemonGame.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PokemonGame</span> <span class="keyword">extends</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Pokemon game produced!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>刚刚说到，要按不同游戏的类型创建不同的工厂，这里我们首先把工厂抽象出来，建一个抽象工厂类<br><figure class="highlight java"><figcaption><span>GameFactory.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">GameFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Game <span class="title">getGame</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>之后，通过继承这个抽象工厂类，创建“马里奥”、“塞尔达”、“精灵宝可梦”的工厂<br><figure class="highlight java"><figcaption><span>MarioGameFactory.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MarioGameFactory</span> <span class="keyword">extends</span> <span class="title">GameFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Game <span class="title">getGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MarioGame();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight java"><figcaption><span>ZeldaGameFactory.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZeldaGameFactory</span> <span class="keyword">extends</span> <span class="title">GameFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Game <span class="title">getGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ZeldaGame();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight java"><figcaption><span>PokemonGameFactory.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PokemonGameFactory</span> <span class="keyword">extends</span> <span class="title">GameFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Game <span class="title">getGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PokemonGame();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这些不同的工厂创建后，我们就可以使用各自的工厂来生产各自的游戏了，这里以生产Pokemon游戏为例<br><figure class="highlight java"><figcaption><span>Test.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GameFactory gameFactory = <span class="keyword">new</span> PokemonGameFactory();</span><br><span class="line">        Game game = gameFactory.getGame();</span><br><span class="line">        game.produce();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>执行代码，控制台输出如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Pokemon game produced!</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><br>我们已经成功将简单工厂升级成了工厂方法模式，提高了代码的可复用性。</p><h3 id="3-UML-1"><a href="#3-UML-1" class="headerlink" title="3.UML"></a>3.UML</h3><p>这时候的UML类图如下:<br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/design_pattern/GameFactoryMethodUML.png" width="50%" height="50%">  </p><h2 id="三、抽象工厂模式"><a href="#三、抽象工厂模式" class="headerlink" title="三、抽象工厂模式"></a>三、抽象工厂模式</h2><h3 id="1-问题引入-2"><a href="#1-问题引入-2" class="headerlink" title="1.问题引入"></a>1.问题引入</h3><p>&ensp;&ensp;&ensp;假如每个游戏都有一个游戏社区，比如Mario有游戏还有游戏社区，Pokemon也有游戏和游戏社区，这里Mario的游戏和社区属于同一个产品族，Pokemon的游戏和社区也属于同一个产品族；而Mario的游戏社区和Pokemon的游戏社区属于同一产品等级，Mario游戏和Pokemon游戏属于同一产品等级。有类似于这种关系的场景，我们使用一种怎样的模式呢？</p><h3 id="2-代码实现-2"><a href="#2-代码实现-2" class="headerlink" title="2.代码实现"></a>2.代码实现</h3><p>&ensp;&ensp;&ensp;首先我们创建一个接口，抽象出来一个工厂GameFactory，这个抽象工厂定义了可以获取游戏和游戏社区的方法。<br><figure class="highlight java"><figcaption><span>GameFactory.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GameFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">Game <span class="title">getGame</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Community <span class="title">getCommunity</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>其中Game和Community是抽象类，具体的游戏和社区需要继承这两个抽象类自己去实现。<br><figure class="highlight java"><figcaption><span>Game.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight java"><figcaption><span>Community.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Community</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight java"><figcaption><span>MarioGame.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MarioGame</span> <span class="keyword">extends</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Mario game produced!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight java"><figcaption><span>MarioCommunity.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MarioCommunity</span> <span class="keyword">extends</span> <span class="title">Community</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Mario community produced."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>之后定义不同的具体工厂，实现GameFactory接口，实现接口中的获取游戏和游戏社区的方法。这里的游戏和社区属于同一产品族，使用具体的工厂可以获得同一产品族的对象。<br>Mario产品族的工厂<br><figure class="highlight java"><figcaption><span>MarioFactory.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MarioFactory</span> <span class="keyword">implements</span> <span class="title">GameFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Game <span class="title">getGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MarioGame();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Community <span class="title">getCommunity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MarioCommunity();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>Pokemon产品族的工厂<br><figure class="highlight java"><figcaption><span>PokemonFactory.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PokemonFactory</span> <span class="keyword">implements</span> <span class="title">GameFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Game <span class="title">getGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PokemonGame();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Community <span class="title">getCommunity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PokemonCommunity();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>我们写一个测试类测试一下。<br><figure class="highlight java"><figcaption><span>Test.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建抽象工厂，指定是Mario工厂</span></span><br><span class="line">        GameFactory gameFactory = <span class="keyword">new</span> MarioFactory();</span><br><span class="line">        <span class="comment">//调用抽象工厂的方法获取游戏和游戏社区</span></span><br><span class="line">        Game game = gameFactory.getGame();</span><br><span class="line">        Community community = gameFactory.getCommunity();</span><br><span class="line">        <span class="comment">//会根据具体工厂的不同获得不同的游戏和游戏社区，这里是Mario产品族</span></span><br><span class="line">        game.produce();</span><br><span class="line">        community.produce();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </p><h3 id="3-UML-2"><a href="#3-UML-2" class="headerlink" title="3.UML"></a>3.UML</h3><p>我们来看一下现在的UML类图。<br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/design_pattern/AbstractFactoryUML.png" width="50%" height="50%"><br>&ensp;&ensp;&ensp;关系很清晰，大家都可以理解。现在想一个问题，如果我们的业务场景需要经常增加产品族内的产品，那么我们总是需要增加抽象工厂里的方法，进而修改抽象工厂的实现，这么一来就不符合软件设计的开闭原则了；如果我们的业务场景需要经常增加产品等级，这时候我们仅需要添加相应的产品工厂和产品类即可。  </p><p>&ensp;&ensp;&ensp;以上介绍了三种工厂相关的模式，不能说哪种模式更优于哪种，只能根据具体的业务场景，选择合适的模式。没有最好的设计模式，只有最适合的设计模式。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;随着工作年限的增加，对工作中的代码结构和质量的追求也在增加。之前看书学习过的设计模式，当时也就是看看，看过或许有的忘记，或许不会使用。入职新公司以来，看团队高级工程师的代码，为了实现一个需求，可以使用合适的设计模式去规范代码，使代码的可读
      
    
    </summary>
    
      <category term="设计模式" scheme="http://redmapleren.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="基础" scheme="http://redmapleren.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="设计模式" scheme="http://redmapleren.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>记一次大批量物理删除数据</title>
    <link href="http://redmapleren.com/2019/04/29/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%A7%E6%89%B9%E9%87%8F%E7%89%A9%E7%90%86%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE/"/>
    <id>http://redmapleren.com/2019/04/29/记一次大批量物理删除数据/</id>
    <published>2019-04-29T03:00:00.000Z</published>
    <updated>2019-04-30T10:02:09.381Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp;&ensp;&ensp;接上次闹钟项目更改字符集之后，这几天又需要对线上数据做处理。背景是，同步闹钟的时候会把用户之前删除过的闹钟都同步下来，而删除的闹钟在客户端没有任何显示，也没有任何恢复的操作，对于用户来说其实是完全没有用的数据。当用户的无用历史闹钟增多到一定数量，同步的时候，客户端上报的数据body就特别大，已经超过了Nginx配置的request最大限制，这样就导致了部分老用户无法同步的情况。解决思路其实很简单，将客户端的上报策略修改成分批上传，服务端分批的返回，最后的结果客户端在本地做聚合，显示给用户。但是这需要客户端和服务端共同修改，客户端还要发版审核，现在需要一种比较快速的方式，让用户在尽可能短的时间内可以进行同步。最后决定将数据库中2018年以前用户无用的闹钟进行删除，找到dba同学商量要删除数据，但是很不幸，dba同学告知我们目前他们没有成熟的工具操作，让我们自己写程序删除，他们可以负责备份数据。看来只能靠自己了，接下来就看一下从分析到实现整个删除任务的具体过程。  </p><h2 id="一、思路分析"><a href="#一、思路分析" class="headerlink" title="一、思路分析"></a>一、思路分析</h2><p>&ensp;&ensp;&ensp;需要进行删除的这张表是一个很宽的数据量很大的表，当前共有七千多万条数据，经过筛选查询，发现2018年之前且状态为无效的闹钟数量达到了五千多万，也就是说现在需求是要物理删除这五千多万条数据。需求明确了，下面就要考虑几个问题。</p><ol><li>要删除的五千多万条数据如何定位？</li><li>怎样高效地删除这么大量的数据同时保证负载正常？</li><li>怎样保证集群环境下，删除任务只执行一次？  </li></ol><p>我们分别看一下解决这些问题的思路。  </p><h3 id="1-定位目标数据"><a href="#1-定位目标数据" class="headerlink" title="1.定位目标数据"></a>1.定位目标数据</h3><p>&ensp;&ensp;&ensp;表中主要字段包括user_id,status,init_time,分别表示闹钟所属的用户id、闹钟状态、闹钟初始化时间。删除的大体思路是通过in user_id字段来delete，那么如何找到要in哪些user_id呢？从上面的分析可以知道，这张表拥有很大的数据量，想要一次delete是不可能的事情，需要进行分批删除，每次in一部分user_id。那么每次的user_id如何获取呢？可以通过分页排序的group by语句得到分批的user_id。  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> user_id <span class="keyword">from</span> clocks <span class="keyword">order</span> <span class="keyword">by</span> user_id <span class="keyword">group</span> <span class="keyword">by</span> user_id <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">500</span>;</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;&ensp;上面的分页查询看上去没什么问题，但是随着翻页次数增大，效率也越来越慢，假设我们翻到了2000页，这个语句查询的2000之前的数据都是无用的，效率特别低下。由数据量分析可知，这张表里通过user_id分组，可以得到200W+数据，如果我们每次分页查询500条，计算可得 最后我们需要将 200W / 500 作为limit的起点，这样的查询是灾难性的。但是通过下面的sql修改，可以大大提高分页的查询效率。  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> user_id <span class="keyword">from</span> clocks <span class="keyword">where</span> user_id &gt; <span class="number">0</span> <span class="keyword">order</span> <span class="keyword">by</span> user_id <span class="keyword">group</span> <span class="keyword">by</span> user_id <span class="keyword">limit</span> <span class="number">500</span>;</span><br><span class="line"><span class="keyword">select</span> user_id <span class="keyword">from</span> clocks <span class="keyword">where</span> user_id &gt; <span class="number">500</span> <span class="keyword">order</span> <span class="keyword">by</span> user_id <span class="keyword">group</span> <span class="keyword">by</span> user_id <span class="keyword">limit</span> <span class="number">500</span>;</span><br><span class="line"><span class="keyword">select</span> user_id <span class="keyword">from</span> clocks <span class="keyword">where</span> user_id &gt; <span class="number">1000</span> <span class="keyword">order</span> <span class="keyword">by</span> user_id <span class="keyword">group</span> <span class="keyword">by</span> user_id <span class="keyword">limit</span> <span class="number">500</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;&ensp;通过where过滤当前页之前的数据，可以大大提高查询效率。只需要每次记下当次分页结果中最大的user_id，下次分页将此user_id作为分页起始条件进行过滤即可。因为我们使用order by进行排序，查询结果都是有序的，可以将每次的user_id结果放进一个LinkedList中，每次使用的时候peekLast()就能得到当前分组的最大user_id。定位目标数据的思路大体就是这样，思路清晰后代码实现也是很容易的。  </p><figure class="highlight java"><figcaption><span>ClockDeleteUser.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClockDeleteUser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下一次分页的起始user_id</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> nextFirstUserId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Long&gt; userIds;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> perLimit;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClockDeleteUser</span><span class="params">(<span class="keyword">long</span> nextFirstUserId,<span class="keyword">int</span> perLimit)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nextFirstUserId = nextFirstUserId;</span><br><span class="line">        <span class="keyword">this</span>.perLimit = perLimit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight java"><figcaption><span>ClockDeleteService.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClockDeleteService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> DELETE_USER_PER_LIMIT = <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SyncDao syncDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取删除语句中in的userId的信息集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Long&gt;&gt; getDeleteUser()&#123;</span><br><span class="line">        List&lt;List&lt;Long&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">long</span> nextFirstUserId = <span class="number">0</span>;</span><br><span class="line">        ClockDeleteUser clockDeleteUser = <span class="keyword">new</span> ClockDeleteUser(nextFirstUserId,DELETE_USER_PER_LIMIT);</span><br><span class="line">        LinkedList&lt;Long&gt; userIds = syncDao.getClockDeleteUserIds(clockDeleteUser);</span><br><span class="line">        <span class="keyword">while</span> (CollectionUtils.isNotEmpty(userIds))&#123;</span><br><span class="line">            result.add(userIds);</span><br><span class="line">            clockDeleteUser.setNextFirstUserId(userIds.peekLast());</span><br><span class="line">            userIds = syncDao.getClockDeleteUserIds(clockDeleteUser);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按照userId集合删除无用的闹钟</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userIds</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteUnusedClock</span><span class="params">(List&lt;Long&gt; userIds)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 分批删除无用闹钟</span></span><br><span class="line">        <span class="keyword">return</span> syncDao.deleteUnusedClocksByUserInitTime(userIds);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <h3 id="2-多线程删除"><a href="#2-多线程删除" class="headerlink" title="2.多线程删除"></a>2.多线程删除</h3><p>&ensp;&ensp;&ensp;找到了每次分批的user_id条件，接下来就可以进行删除操作了。这么庞大的数据量，每次串行执行delete where，明显效率很低，估计删除完这些数据也要进行几个小时吧。这时我们很容易地想到了使用多个线程同时进行delete操作。因为user_id字段是这张表的索引，所以delete的时候走索引，并不会锁住整个表，所以我们可以使用多个线程同时进行删除。但是由于数据量大，分组要达4000+，我们要使用多少个线程同时工作呢？<br>这里我们通过 Runtime.getRuntime().availableProcessors() 获取当前可用处理器数量，用来创建线程池。<br>&ensp;&ensp;&ensp;我们使用 Executors.newFixedThreadPool() 创建固定线程数的线程池，传入的参数就是上面获取的处理器的数量。当工作线程到达了处理器数量，新进来的任务便会进入阻塞队列等待，待工作线程中有任务完成，阻塞队列中的任务再执行。线程池的工作原理，大家应该都已经很熟悉了，在此就不多说了。<br>多线程执行当然能提高效率，但是我们能将这4000+的任务一下子提交给线程池来执行吗？这样的话cpu会有突然增长，这里我们可以使用限流策略，控制任务进入线程池的速度。Google Guava中提供了一个很好用的限流工具，它就是 RateLimiter，一个基于令牌桶算法实现的限流器，想必大家也都知道。使用RateLimiter可以很方便地实现限流。<br>&ensp;&ensp;&ensp;通过以上的思考，多线程删除也可以很简单地实现，在文章的后面我会给出实现代码。  </p><h3 id="3-集群中单点执行任务"><a href="#3-集群中单点执行任务" class="headerlink" title="3.集群中单点执行任务"></a>3.集群中单点执行任务</h3><p>&ensp;&ensp;&ensp;应用部署在集群中，但是我们需求的任务只需要一台机器执行即可。我们如何来保证集群中只有一台机器执行这个删除任务呢？<br>&ensp;&ensp;&ensp;我们可以使用Redis来实现。大体思路如下：<br>&ensp;&ensp;&ensp;判断标识删除任务执行的Key是否存在，存在的话直接返回，不存在则使用 SETNX 尝试设置Key的value为当前自己的Pid，再次获取key对应的value值，若value和自己当前的pid不同，说明不是当前节点获取的锁，不能执行任务，只有value和当前自己的pid相同时才执行删除任务。这样就可以保证集群中只有一个节点执行了删除任务，在任务执行结束之后要删除key。下面给出流程图，思路一目了然。  </p><div align="center"><br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/database/delete_clock/%E5%88%A0%E9%99%A4%E4%BB%BB%E5%8A%A1redis.png" width="50%" height="50%"><br></div><h3 id="4-在哪里触发任务"><a href="#4-在哪里触发任务" class="headerlink" title="4.在哪里触发任务"></a>4.在哪里触发任务</h3><p>&ensp;&ensp;&ensp;分析了如何定位以及删除数据，那我们如何触发任务的执行呢？这里我在配置文件中设置了一个开关，用来标识本次启动是否需要执行删除任务。这个开关和上面提到的redis key共同决定是否在当前节点执行任务。<br>&ensp;&ensp;&ensp;什么时机进行删除呢？因为删除任务中使用了spring bean service，所以应该在spring容器初始化bean完成后执行删除任务。<br>&ensp;&ensp;&ensp;可以通过实现 ApplicationRunner 接口，实现接口的run方法来执行我们的任务。查阅springboot官方文档<br><blockquote><footer><strong>@SpringbootDoc</strong><cite><a href="https://docs.spring.io/spring-boot/docs/2.1.4.RELEASE/reference/htmlsingle/#using-boot" target="_blank" rel="noopener">docs.spring.io/spring-boot/docs/2.1.4.RELEASE/reference/htmlsingle/#using-boot</a></cite></footer></blockquote></p><div align="center"><br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/database/delete_clock/ApplicationRunner%E6%96%87%E6%A1%A3.png" width="100%" height="100%"><br></div>  <h2 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h2><p>&ensp;&ensp;&ensp;通过以上分析，实现思路已经非常清晰，下面给出实现代码，仅供参考。<br><figure class="highlight java"><figcaption><span>DeleteClockTask.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeleteClockTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Long&gt; userIds;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ClockDeleteService clockDeleteService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DeleteClockTask</span><span class="params">(String name, List&lt;Long&gt; userIds)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.userIds = userIds;</span><br><span class="line">        <span class="keyword">this</span>.clockDeleteService = (ClockDeleteService) SpringContextUtils.getBeanByClass(ClockDeleteService.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"delete clock task &#123;&#125; start..."</span>, name);</span><br><span class="line">        clockDeleteService.deleteUnusedClock(userIds);</span><br><span class="line">        log.info(<span class="string">"delete unused clock task &#123;&#125; end."</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </p><figure class="highlight java"><figcaption><span>InitialBeanHandler.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InitialBeanHandler</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ClockDeleteService clockDeleteService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;task.delete.status&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> deleteSwitch;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedissonHandler redissonHandler;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> TASK_EXPIRE_MILLS_TIME = <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String DELETE_CLOCK_TASK_KEY = <span class="string">"delete_used_clock_running"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> ExecutorService pool = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 先判断删除开关是否开启</span></span><br><span class="line">        log.info(<span class="string">"删除无用闹钟开关 deleteSwitch : "</span> + deleteSwitch);</span><br><span class="line">        <span class="comment">// 若开关开启，并且当前没有节点在执行删除任务，则执行删除任务</span></span><br><span class="line">        <span class="comment">//通过redis查询是否有节点已经运行了删除任务</span></span><br><span class="line">        <span class="keyword">boolean</span> taskRunning = redissonHandler.exists(DELETE_CLOCK_TASK_KEY);</span><br><span class="line"></span><br><span class="line">        List&lt;DeleteClockTask&gt; tasks = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (deleteSwitch == <span class="number">1</span> &amp;&amp; !taskRunning) &#123;</span><br><span class="line">            <span class="comment">//当前节点执行删除任务，设置redis中的任务状态</span></span><br><span class="line">            String nowPid = ManagementFactory.getRuntimeMXBean().getName();</span><br><span class="line">            redissonHandler.setNX(DELETE_CLOCK_TASK_KEY, nowPid, TASK_EXPIRE_MILLS_TIME);</span><br><span class="line">            String taskRunningPid = redissonHandler.get(DELETE_CLOCK_TASK_KEY, String.class);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!StringUtils.equals(taskRunningPid, nowPid)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取分批删除的userId的list</span></span><br><span class="line">            List&lt;List&lt;Long&gt;&gt; deleteUsersList = clockDeleteService.getDeleteUser();</span><br><span class="line">            <span class="keyword">if</span> (CollectionUtils.isNotEmpty(deleteUsersList)) &#123;</span><br><span class="line">                <span class="keyword">int</span> size = deleteUsersList.size();</span><br><span class="line">                log.info(<span class="string">"There are &#123;&#125; delete clock tasks totally."</span>, size);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                    List&lt;Long&gt; userIds = deleteUsersList.get(i);</span><br><span class="line">                    DeleteClockTask task = <span class="keyword">new</span> DeleteClockTask(<span class="string">"deleteTask"</span> + i, userIds);</span><br><span class="line">                    tasks.add(task);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//限流</span></span><br><span class="line">            RateLimiter rateLimiter = RateLimiter.create(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (DeleteClockTask task : tasks) &#123;</span><br><span class="line">                log.info(<span class="string">"delete clock task &#123;&#125; wait time &#123;&#125;"</span>, task.getName(), rateLimiter.acquire());</span><br><span class="line">                pool.execute(task);</span><br><span class="line">                log.info(<span class="string">"delete clock task &#123;&#125; finished."</span>, task.getName());</span><br><span class="line">            &#125;</span><br><span class="line">            log.info(<span class="string">"delete clock tasks all finished"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//执行完成，将redis中标志任务执行状态的key删除</span></span><br><span class="line">            redissonHandler.del(DELETE_CLOCK_TASK_KEY);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <h2 id="三、线上执行"><a href="#三、线上执行" class="headerlink" title="三、线上执行"></a>三、线上执行</h2><p>&ensp;&ensp;&ensp;经过测试环境反复测试，最终挑了个风和日丽的日子，准备在生产环境执行。<br>&ensp;&ensp;&ensp;合并master，开始部署，盯着日志，静静等待…<br>&ensp;&ensp;&ensp;线上删除任务共分为了4014个组，按每秒钟2组的速度进入线程池,开始执行删除任务，观察cpu使用率，基本稳定，没有出现激增。半个多小时后，所有任务执行完成。一共删除了58115102条数据，至此这次删除历史数据的任务完成。<br>&ensp;&ensp;&ensp;第一次在线上物理删除这么大量的数据，仅此记录一下本次处理的思路和实现方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;接上次闹钟项目更改字符集之后，这几天又需要对线上数据做处理。背景是，同步闹钟的时候会把用户之前删除过的闹钟都同步下来，而删除的闹钟在客户端没有任何显示，也没有任何恢复的操作，对于用户来说其实是完全没有用的数据。当用户的无用历史闹钟增多到一
      
    
    </summary>
    
      <category term="数据库" scheme="http://redmapleren.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://redmapleren.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="线上" scheme="http://redmapleren.com/tags/%E7%BA%BF%E4%B8%8A/"/>
    
      <category term="多线程" scheme="http://redmapleren.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>记一次数据库更改字符集踩的坑</title>
    <link href="http://redmapleren.com/2019/04/19/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9B%B4%E6%94%B9%E5%AD%97%E7%AC%A6%E9%9B%86%E8%B8%A9%E7%9A%84%E5%9D%91/"/>
    <id>http://redmapleren.com/2019/04/19/记一次数据库更改字符集踩的坑/</id>
    <published>2019-04-19T06:30:00.000Z</published>
    <updated>2019-04-19T09:19:21.571Z</updated>
    
    <content type="html"><![CDATA[<p>最近接手了一个闹钟App的后端项目，其中有个功能就是用户可以将本地闹钟同步到服务器，以便更换设备后能从服务器同步数据到新设备。但是这几天观察后台日志发现，同步的时候总是ERROR，定位错误发现跟数据库的字符集有关，在此记录一下本次线上错误的排查过程。</p><h2 id="一、定位ERROR"><a href="#一、定位ERROR" class="headerlink" title="一、定位ERROR"></a>一、定位ERROR</h2><p>通过Kibana查看最近的ERROR日志，可发现如下的错误描述。<br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/database/index_accident/incorrect.png" width="100%" height="100%"><br><br>&ensp;&ensp;&ensp;很明显可以发现，是因为insert的时候插入的数据不符合该列的要求。进而查看插入的数据，定位到插入内容含有特殊字符，比如emoji表情和其他一些字符。查询table的字符集发现这张表是utf8字符集，并不是utf8mb4的字符集，所以报这个错也是很正常了。看到这里你可能会问，这个问题应该在很久之前就应该发现了，为什么这几天才把它揪出来呢？这个项目很早了，包括后端和客户端，经过客户端同学的代码筛查，发现由于历史的原因，客户端对同步的结果的处理存在bug，导致后台同步失败某冲情况下也会提示同步成功，所以前台并不会暴露这个问题。<br>&ensp;&ensp;&ensp;所以当时建表使用的utf8字符集已经不能满足用户的自定义名称的需求，需要变更这张表的字符集为utf8mb4。但是一查数据，这张表就有七千多万的数据，更改字符集的话对之前的内容是否有影响，要执行多久？问题找到了，就开始找dba同学商量，最后决定先创建一张utf8mb4的新表，将原来的数据导入到新表，完成后，再将原表rename成新表，完成切换。说干就干，晚上提了工单，dba开始执行。</p><h2 id="二、黎明前的黑暗"><a href="#二、黎明前的黑暗" class="headerlink" title="二、黎明前的黑暗"></a>二、黎明前的黑暗</h2><p>&ensp;&ensp;&ensp;第二天早上起床，发现接到了n多条服务报警，正是昨天更改字符集的服务。到了公司立马查看服务日志，发现服务挂了，重新部署启动，没有两分钟又挂了。这是什么原因呢？没有更改任何代码，只更改了一个表的字符集，整个服务就崩了吗？这是什么道理，一时间也是很懵。这时候dba那边发来了一长串slow sql，是一个两个表的连表查询，一开始我并未用explain分析sql语句，因为sql较简单，发现语句的书写还算规范，该走的索引也会走，一时间也无法定位问题。<br>&ensp;&ensp;&ensp;难道是昨天修改字符集之后，insert无异常，表的增量变大，查询变得更加慢了？根据这个猜测，为了临时解决这个问题，准备将这一小段代码修改成分表查询，在内存里聚合处理。正在准备拉分支修改代码的时候，dba同学那边发消息说是索引失效了。我赶紧explain了一下刚刚的sql语句，果然，之前应该走的索引在改了字符集之后就失效了。<br>修改字符集之后的explain结果：<br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/database/index_accident/%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88explain.png" width="100%" height="100%"><br><br>修改字符集之前的explain结果：<br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/database/index_accident/%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88explain.png" width="100%" height="100%"><br><br>原来连表查询的时候，两个表的字符集不同会导致索引失效，所以在这个如此多数据的表中进行连表查询是一件灾难性的事。<br>找到原因后，将连表查询的另一个表的字符集同样做出修改，之后索引正常，服务也正常了。  </p><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>通过这次处理线上问题，深深体会到在表数据很多的时候进行连表查询是一件多么可怕的事情，一不小心就把数据库或者服务搞崩溃了。还有一点很关键，不要像我一样看到sql简单就理所当然地以为会按照理论的情况走索引，拿到有问题的sql，一定要仔细分析，使用工具，比如explain来辅助分析sql，这样才不会遗漏问题。后续我们会对这个项目进行重构，将所有连表查询改成单表查询，然后在内存中对数据做聚合。另外这个表的数据已经到达七千多万了，修改了正确的字符集之后表的增量会更大，分表的工作也迫在眉睫。<br>本文仅此记录下问题排查经过，如果大家也遇到了类似的问题，希望可以进行参考。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近接手了一个闹钟App的后端项目，其中有个功能就是用户可以将本地闹钟同步到服务器，以便更换设备后能从服务器同步数据到新设备。但是这几天观察后台日志发现，同步的时候总是ERROR，定位错误发现跟数据库的字符集有关，在此记录一下本次线上错误的排查过程。&lt;/p&gt;
&lt;h2 id=
      
    
    </summary>
    
      <category term="数据库" scheme="http://redmapleren.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://redmapleren.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="线上" scheme="http://redmapleren.com/tags/%E7%BA%BF%E4%B8%8A/"/>
    
  </entry>
  
  <entry>
    <title>关于红黑树的学习笔记</title>
    <link href="http://redmapleren.com/2018/09/23/%E5%85%B3%E4%BA%8E%E7%BA%A2%E9%BB%91%E6%A0%91%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://redmapleren.com/2018/09/23/关于红黑树的学习笔记/</id>
    <published>2018-09-23T07:37:05.000Z</published>
    <updated>2019-04-19T06:30:23.959Z</updated>
    
    <content type="html"><![CDATA[<p>前一段时间组内技术分享，正好趁这个机会好好研究了一下红黑树。在这里写下学习红黑树的一些成果和体会。</p><h2 id="一、什么是红黑树"><a href="#一、什么是红黑树" class="headerlink" title="一、什么是红黑树"></a>一、什么是红黑树</h2><p>先看一下《算法导论》中对红黑树的定义。</p><ol><li>每个节点或者是红色，或者是黑色</li><li>根节点是黑色</li><li>每一个叶子节点(最后的空节点)是黑色的</li><li>如果一个节点是红色的，那么它的孩子节点都是黑色的</li><li>从任意一个节点到叶子节点，经过的黑色节点是一样的    <div style="display:none"><br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/data_structure/RBTree/%E5%B9%B3%E9%93%BA%E5%B0%81%E9%9D%A2%20%281%29.png" alt="post-cover"><br></div></li></ol><p>这5条红黑树的定义看过之后感觉自己还是不太懂什么是红黑树，个人觉得有这种感觉的原因是定义比较抽象，不容易让人理解。那么，我们就从另一个角度入手来理解红黑树。</p><h3 id="1-2-3树"><a href="#1-2-3树" class="headerlink" title="1. 2-3树"></a>1. 2-3树</h3><p>这里先介绍一下2-3树。因为2-3树和红黑树有一定的联系，对于理解红黑树会有很大的帮助，所以我们先来看一下2-3树相关的一些性质。<br>首先，2-3树满足二分搜索树的性质。不同的是在2-3树中，存在两种节点。一种是有两个叶子节点的，我们称作“2节点”；另一种是有三个叶子节点的，我们称作“3节点”。    </p><div align="center"><br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/data_structure/RBTree/2-3%E6%A0%91%E8%8A%82%E7%82%B9%E6%A6%82%E8%A7%88.png" width="50%" height="50%"><br></div><br>如下是一整颗2-3树的示例。需要强调的是2-3树是完全平衡的树，即从根节点到任意一个叶子节点的高度都是相同的。<br><div align="center"><br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/data_structure/RBTree/2-3%E6%A0%91%E6%95%B4%E4%BD%93%E7%A4%BA%E4%BE%8B.png" width="60%" height="60%"><br></div>  <h3 id="2-2-3树怎样保持完全平衡性"><a href="#2-2-3树怎样保持完全平衡性" class="headerlink" title="2. 2-3树怎样保持完全平衡性"></a>2. 2-3树怎样保持完全平衡性</h3><p>向2-3树中添加一个节点，遵循向二分搜索树中添加节点的基本思路，插入节点比当前节点小，则向当前节点的左子树添加，否则向右子树添加。不过由于2-3树特殊的性质，当要向“2节点”添加节点时，将待插入的节点与该“2节点”进行融合，组成一个新的“3节点”，如下图所示。  </p><div align="center"><br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/data_structure/RBTree/2-3%E6%A0%91%E6%8F%92%E5%85%A52%E8%8A%82%E7%82%B9.png" width="50%" height="50%"><br></div><br>如果要向“3节点”添加节点，同向“2节点”添加节点一样，先组成一个临时的4节点，之后再拆分成3个“2节点”，如图所示。<br><div align="center"><br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/data_structure/RBTree/2-3%E6%A0%91%E6%8F%92%E5%85%A53%E8%8A%82%E7%82%B9.png" width="60%" height="60%"><br></div><br>如果要插入的“3节点”的父节点是一个“2节点”，通过上述步骤得到的拆分过成为父节点的“2节点”，需要向原“3节点”的父节点进行融合，组成新的“3节点”。过程如下图所示。<br><div align="center"><br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/data_structure/RBTree/2-3%E6%A0%91%E6%8F%92%E5%85%A53%E8%8A%82%E7%82%B9-%E7%88%B6%E8%8A%82%E7%82%B9.png" width="80%" height="80%"><br></div><br>如果要插入的“3节点”的父节点是一个“3节点”，大体思路相同，向父节点进行融合，只不过此时融合后成为一个临时的“4节点”，之后要再次进行拆分。过程如图所示。<br><div align="center"><br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/data_structure/RBTree/2-3%E6%A0%91%E6%8F%92%E5%85%A53%E8%8A%82%E7%82%B9-%E7%88%B6%E8%8A%82%E7%82%B93.png" width="80%" height="80%"><br></div>  <p>如上所述，2-3树保持了完全的平衡性。说了这么长时间的2-3树，那么2-3树和红黑树之间到底有怎样的关系，下面我们具体来看一下。  </p><h3 id="3-2-3树与红黑树"><a href="#3-2-3树与红黑树" class="headerlink" title="3. 2-3树与红黑树"></a>3. 2-3树与红黑树</h3><p>对于2-3树中的“2节点”，对应于红黑树中的“黑节点”，即相当于普通二分搜索树中的一个节点。<br>对于2-3树中的“3节点”，相当于普通二分搜索树中的两个节点融合在一起，我们如何来描述这种融合在一起的两个节点之间的关系呢？其实很简单，如果我们将连接这两个节点的边涂成红色，就可以表示这两个节点是融合的关系，即2-3树中的一个“3节点”。那么问题又来了，对于树这种数据结构，我们在定义的时候通常都是针对节点进行定义，并没有对节点之间的边进行定义，我们如何来表示这条被涂成红色的边呢？大家都知道，对于树中的任意一个节点，都是只有一个父亲节点，所以与其父节点相连接的边可以用该节点进行表示。那么我们就可以将这两个节点中较小的节点（作为左子树的节点）涂成红色，就可以很好地表示这两个节点融合的关系了。  </p><div align="center"><br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/data_structure/RBTree/2-3%E6%A0%91%E4%B8%8E%E7%BA%A2%E9%BB%91%E6%A0%91-3%E8%8A%82%E7%82%B9%E5%AF%B9%E5%BA%94.png" width="60%" height="60%"><br></div><br>综合以上描述，2-3树与红黑树之间的关系，我们可以用下图很好地进行表示。我们这里说的红色节点都是向左倾斜的。<br><div align="center"><br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/data_structure/RBTree/2-3%E6%A0%91%E4%B8%8E%E7%BA%A2%E9%BB%91%E6%A0%91-%E8%8A%82%E7%82%B9%E7%BB%BC%E5%90%88.png" width="80%" height="80%"><br></div><br>看过2-3树中的两种节点和红黑树中节点的对应关系后，我们就来看一下一棵2-3树与红黑树之间的对比，如图所示。<br><div align="center"><br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/data_structure/RBTree/2-3%E6%A0%91%E4%B8%8E%E7%BA%A2%E9%BB%91%E6%A0%91-%E6%95%B4%E4%BD%93%E5%AF%B9%E6%AF%94.png" width="100%" height="100%"><br></div>    <h3 id="4-红黑树的性质"><a href="#4-红黑树的性质" class="headerlink" title="4. 红黑树的性质"></a>4. 红黑树的性质</h3><p>讨论了2-3树与红黑树之间的关系，我们再回过头来看一下红黑树的5条定义和性质，会发现很好理解了。  </p><ol><li>每个节点或者是红色，或者是黑色<br>这条定义很好理解，在此不做解释。</li><li>根节点是黑色<br>根据之前说过的，红色的节点对应于2-3树中“3节点”中较小的那个节点，拆成两个“2节点”的话则是一个左子树的节点，即红色的节点总是可以和其父节点进行融合，所以红色节点一定有父节点，显然根节点不能是红色，所以根节点是黑色。</li><li>每一个叶子节点(最后的空节点)是黑色的<br>这条性质和第2条是对应的。对于叶子节点（最后的空节点），一颗空树的根节点也为黑色，所以与其说第三条是一条性质，不如说也是一个定义。</li><li>如果一个节点是红色的，那么它的孩子节点都是黑色的<br>根据上面2-3树与红黑树两种节点的对比图，我们很容易看到，红色节点的两个子树，对应2-3树中的话，要么是一个“2节点”，要么是一个“3节点”，而不管是“2节点”还是“3节点”，相连的第一个节点都是黑色的，所以说红色节点的孩子节点都是黑色的。</li><li>从任意一个节点到叶子节点，经过的黑色节点是一样的<br>根据2-3树与红黑树的关系对比图，可以发现，红黑树中一个黑色节点对应2-3树中一整个节点（“2节点”或“3节点”），而2-3树是完全平衡的树，从根节点到任意路径的叶子节点，经过的节点个数都是相同的，对应红黑树中，即从任意节点到叶子节点，经过的黑色节点是一样的。  </li></ol><h2 id="二、-红黑树添加元素"><a href="#二、-红黑树添加元素" class="headerlink" title="二、 红黑树添加元素"></a>二、 红黑树添加元素</h2><p>回忆刚刚提到的向2-3树中添加元素的过程，或者添加进一个“2节点”，形成一个“3节点”，或者添加进一个“3节点”，形成一个临时的“4节点”。理解了2-3树如何添加节点，对应红黑树就很好理解了。很容易知道，我们总是会将待插入的节点向父节点进行融合，所以我们将待插入的节点看成红色,即永远添加红色节点。<br>向一棵空树添加节点42。插入后，该节点是根节点，根据红黑树的性质，根节点必须是黑色，所以讲该节点染成黑色。  </p><div align="center"><br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/data_structure/RBTree/%E7%BA%A2%E9%BB%91%E6%A0%91%E6%B7%BB%E5%8A%A0-%E6%A0%B9%E8%8A%82%E7%82%B9.png" width="50%" height="50%"><br></div><br>若向如图的红黑树中添加节点37。因为37比42小，所以添加在42的左子树，对应2-3树中，形成一个“3节点”。<br><div align="center"><br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/data_structure/RBTree/%E7%BA%A2%E9%BB%91%E6%A0%91%E6%B7%BB%E5%8A%A0-%E5%B7%A6%E5%AD%90%E6%A0%91.png" width="80%" height="80%"><br></div><br>若向如图的红黑树中添加节点42。因为42比37大，所以添加在37的右子树。这样的话红色节点就出现在了一个节点的右子树中，所以此时需要进行左旋转，让树满足红黑树的性质。<br><div align="center"><br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/data_structure/RBTree/%E7%BA%A2%E9%BB%91%E6%A0%91%E6%B7%BB%E5%8A%A0-%E5%B7%A6%E6%97%8B%E8%BD%AC.png" width="80%" height="80%"><br></div>   <h3 id="1-左旋转"><a href="#1-左旋转" class="headerlink" title="1. 左旋转"></a>1. 左旋转</h3><p>对于一般的情况，如何进行左旋转呢？我们要对下图的红黑树进行左旋转。</p><div align="center"><br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/data_structure/RBTree/%E5%B7%A6%E6%97%8B%E8%BD%AC-%E5%88%9D%E5%A7%8B.png" width="40%" height="40%"><br></div><br>首先将node节点与x节点断开，其次将x的左子树作为node的右子树。<br><div align="center"><br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/data_structure/RBTree/%E5%B7%A6%E6%97%8B%E8%BD%AC-%E8%BF%87%E7%A8%8B1.png " width="70%" height="70%"><br></div><br>然后再将node作为x新的左子树，之后要把x的颜色染成node的颜色，最后将node的颜色变为红色，这样就完成了左旋转的操作。<br><div align="center"><br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/data_structure/RBTree/%E5%B7%A6%E6%97%8B%E8%BD%AC-%E8%BF%87%E7%A8%8B2.png" width="70%" height="70%"><br></div>  <h3 id="2-颜色翻转（flipColors）"><a href="#2-颜色翻转（flipColors）" class="headerlink" title="2. 颜色翻转（flipColors）"></a>2. 颜色翻转（flipColors）</h3><p>向红黑树中插入节点66，很容易知道插入到42右子树的位置，对应于2-3树的插入如图所示。 </p><div align="center"><br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/data_structure/RBTree/%E9%A2%9C%E8%89%B2%E7%BF%BB%E8%BD%AC-1.png" width="70%" height="70%"><br></div><br>然而上面我们说到，我们总是要将新拆分出来的树的父亲节点向上进行融合，即这个父亲节点在红黑树中总是红色的，根据红黑树的性质，该父亲节点的两个孩子节点一定是黑色的。这样就需要将上一步形成的树进行颜色的翻转，变成如下图的形态。<br><div align="center"><br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/data_structure/RBTree/%E9%A2%9C%E8%89%B2%E7%BF%BB%E8%BD%AC-2.png" width="50%" height="50%"><br></div>   <h3 id="3-右旋转"><a href="#3-右旋转" class="headerlink" title="3. 右旋转"></a>3. 右旋转</h3><p>向如图的红黑树中插入节点12，根据二分搜索树插入的操作，此时会形成一条链状的结构，对于2-3树中则是变形成为图中的样子，才能保证平衡性。所以在红黑树中，也要通过变形，变成与2-3树对应的形态。这种情况的变形操作，称为“右旋转”。  </p><div align="center"><br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/data_structure/RBTree/%E5%8F%B3%E6%97%8B%E8%BD%AC-1.png" width="70%" height="70%"><br></div><br>一般的情况，右旋转操作同上面的左旋转操作很类似，下面我们一起来看一下过程。我们要对下图的红黑树进行右旋转的操作。<br><div align="center"><br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/data_structure/RBTree/%E5%8F%B3%E6%97%8B%E8%BD%AC%E4%B8%80%E8%88%AC-%E5%88%9D%E5%A7%8B.png" width="50%" height="50%"><br></div><br>首先将node和x节点断开，将x的右子树T1作为node的左子树。<br><div align="center"><br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/data_structure/RBTree/%E5%8F%B3%E6%97%8B%E8%BD%AC%E4%B8%80%E8%88%AC-%E8%BF%87%E7%A8%8B1.png" width="50%" height="50%"><br></div><br>其次将node作为x的右子树。<br><div align="center"><br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/data_structure/RBTree/%E5%8F%B3%E6%97%8B%E8%BD%AC%E4%B8%80%E8%88%AC-%E8%BF%87%E7%A8%8B2.png" width="50%" height="50%"><br></div><br>接着要把x的颜色染成原来node的颜色，把node染成红色。<br><div align="center"><br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/data_structure/RBTree/%E5%8F%B3%E6%97%8B%E8%BD%AC%E4%B8%80%E8%88%AC-%E8%BF%87%E7%A8%8B3.png" width="50%" height="50%"><br></div><br>然后很显然，需要再进行一次颜色翻转操作，才能满足红黑树的性质。<br><div align="center"><br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/data_structure/RBTree/%E5%8F%B3%E6%97%8B%E8%BD%AC%E5%90%8E%E9%A2%9C%E8%89%B2%E7%BF%BB%E8%BD%AC.png" width="50%" height="50%"><br></div><br><br><br><br><br>有一种比较复杂的情况，向下图的红黑树中插入节点40,要满足的红黑树的性质我们需要怎么操作呢？<br><div align="center"><br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/data_structure/RBTree/%E7%BA%A2%E9%BB%91%E6%A0%91%E6%8F%92%E5%85%A5%E5%A4%8D%E6%9D%82-1.png" width="70%" height="70%"><br></div><br>对应2-3树中最终的形态，第一步我们可以通过一次左旋转，变成下图的样子。<br><div align="center"><br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/data_structure/RBTree/%E7%BA%A2%E9%BB%91%E6%A0%91%E6%8F%92%E5%85%A5%E5%A4%8D%E6%9D%82%E5%B7%A6%E6%97%8B%E8%BD%AC.png" width="60%" height="60%"><br></div><br>会发现，这样就变成了上面说到的需要右旋转的形态，所以再进行一次右旋转和颜色翻转，就可以满足红黑树的性质了。<br><div align="center"><br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/data_structure/RBTree/%E7%BA%A2%E9%BB%91%E6%A0%91%E6%8F%92%E5%85%A5%E5%A4%8D%E6%9D%82%E5%8F%B3%E6%97%8B%E8%BD%AC%E9%A2%9C%E8%89%B2%E7%BF%BB%E8%BD%AC.png" width="90%" height="90%"><br></div>   <h3 id="4-红黑树插入总结"><a href="#4-红黑树插入总结" class="headerlink" title="4.红黑树插入总结"></a>4.红黑树插入总结</h3><p>上面分情况讨论了向红黑树中添加节点的各种情况，这里总结一下。其实根据上面的讨论，我们可以发现，最后一种复杂的情况可以涵盖其余简单的情况，复杂的操作包含了左旋转、右旋转、颜色翻转，这三种操作，完全可以保持红黑树的性质。下面的一张图，很好的总结了向红黑树中添加节点不同情况下的过程。  </p><div align="center"><br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/data_structure/RBTree/%E7%BA%A2%E9%BB%91%E6%A0%91%E6%8F%92%E5%85%A5%E6%80%BB%E7%BB%93.png" width="90%" height="90%"><br></div>   <h2 id="三、红黑树删除元素"><a href="#三、红黑树删除元素" class="headerlink" title="三、红黑树删除元素"></a>三、红黑树删除元素</h2><p>关于红黑树的删除操作，比插入操作要复杂一些，需要分情况进行讨论。下面我们具体来看一下。<br>红黑树的删除操作大体分为2步：  </p><ol><li>二分搜索树删除节点  </li><li>删除修复操作  </li></ol><p>红黑树的删除首先满足二分搜索树的删除，然后对删除节点后的树进行修复操作，让其重新满足红黑树的5条性质。<br>对于二分搜索树的删除，这里就不再赘述，我们主要讨论红黑树的删除修复操作。以下所说的当前节点意思是通过二分搜索树的方式删除要删除的节点后，代替原来节点的节点。<br>当删除节点是红色节点时,那么原来红黑树的性质依旧保持，此时不用做修复操作。<br>当删除节点是黑色节点时,情况很多，我们分情况讨论。  </p><h3 id="1-简单情况"><a href="#1-简单情况" class="headerlink" title="1.简单情况"></a>1.简单情况</h3><ol><li>当前节点是红色节点<br>直接把当前节点染成黑色,结束，红黑树的性质全部恢复。  </li><li>当前节点是黑色节点，并且是根节点<br>什么都不做，直接结束。  </li></ol><h3 id="2-复杂情况"><a href="#2-复杂情况" class="headerlink" title="2.复杂情况"></a>2.复杂情况</h3><ol><li><p>N、S、SL、SR、P都为黑色<br>其中N是上述的当前节点，S是N的兄弟节点，P是N的父节点，SL和SR是N兄弟节点的左右孩子节点。</p><div align="center"><br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/data_structure/RBTree/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%88%A0%E9%99%A4%E6%83%85%E5%86%B51-1.png" width="40%" height="40%"><br></div><br>此时将S染成红色，这样经过N路径的黑色节点就和N的兄弟子树中的黑色节点相同了，但是经过P节点的黑色节点少了一个，此时需要将P当做新的N再进行操作，具体怎么操作可以见以下一些情况。<br><div align="center"><br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/data_structure/RBTree/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%88%A0%E9%99%A4%E6%83%85%E5%86%B51-2.png" width="40%" height="40%"><br></div>    </li><li><p>N、S、SL、SR为黑色，P为红色</p><div align="center"><br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/data_structure/RBTree/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%88%A0%E9%99%A4%E6%83%85%E5%86%B52-1.png" width="40%" height="40%"><br></div><br>此时将P和S的颜色进行交换,P成为了黑色,它为经过节点N的路径添加了一个黑色节点，从而补偿了被删除的黑色节点。S的颜色只是上移到父节点P上,因而经过S节点路径的黑色节点的数目也没有发生改变。<br><div align="center"><br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/data_structure/RBTree/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%88%A0%E9%99%A4%E6%83%85%E5%86%B52-2.png" width="40%" height="40%"><br></div>    </li><li><p>N、S为黑色，SR为红色<br>图中蓝色节点表示该节点可以为黑色也可以为红色，即对该节点的颜色没有要求。<br><div align="center"><br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/data_structure/RBTree/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%88%A0%E9%99%A4%E6%83%85%E5%86%B53-1.png" width="40%" height="40%"><br></div><br>此时将以P为根的子树进行左旋转<br><div align="center"><br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/data_structure/RBTree/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%88%A0%E9%99%A4%E6%83%85%E5%86%B53-2.png" width="40%" height="40%"><br></div><br>然后交换P和S的颜色<br><div align="center"><br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/data_structure/RBTree/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%88%A0%E9%99%A4%E6%83%85%E5%86%B53-3.png" width="40%" height="40%"><br></div><br>将SR染成黑色<br><div align="center"><br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/data_structure/RBTree/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%88%A0%E9%99%A4%E6%83%85%E5%86%B53-4.png" width="40%" height="40%"><br></div><br>调整后经由N的路径的黑色节点数比调整前增加了一个，恰好补偿了被删除的黑色节点。对于不经过N但经过其他节点的任意一个路径来说，它们贡献的黑色节点数目不变。  </p></li><li><p>N、S为黑色，SL为红色，SR为黑色<br><div align="center"><br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/data_structure/RBTree/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%88%A0%E9%99%A4%E6%83%85%E5%86%B54-1.png" width="40%" height="40%"><br></div><br>此时，将以S为根的子树进行右旋转<br><div align="center"><br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/data_structure/RBTree/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%88%A0%E9%99%A4%E6%83%85%E5%86%B54-2.png" width="40%" height="40%"><br></div><br>接着交换S和SL的颜色<br><div align="center"><br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/data_structure/RBTree/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%88%A0%E9%99%A4%E6%83%85%E5%86%B54-3.png" width="40%" height="40%"><br></div><br>节点SL的左孩子在旋转前后不变，而SL原来为红色，所以SL的左孩子必定为黑色。所以旋转后对于N节点来说，相当于情况3。之后再通过情况3中的描述进行操作。整体上情况4需要进行一次右旋转和一次左旋转。  </p></li><li><p>N为黑色，S为红色<br><div align="center"><br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/data_structure/RBTree/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%88%A0%E9%99%A4%E6%83%85%E5%86%B55-1.png" width="40%" height="40%"><br></div><br>此时，将以P为根的子树进行左旋转<br><div align="center"><br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/data_structure/RBTree/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%88%A0%E9%99%A4%E6%83%85%E5%86%B55-2.png" width="40%" height="40%"><br></div><br>将P和S颜色交换<br><div align="center"><br><img src="https://hexo-rxy.oss-cn-beijing.aliyuncs.com/data_structure/RBTree/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%88%A0%E9%99%A4%E6%83%85%E5%86%B55-3.png" width="40%" height="40%"><br></div><br>经过这样的变换后，把该情形转化成了N为黑色，其兄弟为黑色的情形，再通过以上描述的几种情况进行变换，最终保持红黑树的性质。<br><br><br><br><br>红黑树删除的各种复杂的情况，以上都进行了讨论，虽然比较繁琐，但是认真研究后还是可以理解的，并没有之前想象地那么困难。  </p></li></ol><h2 id="四、红黑树的性能"><a href="#四、红黑树的性能" class="headerlink" title="四、红黑树的性能"></a>四、红黑树的性能</h2><p>红黑树的增删改查的复杂度显然是O(logn)级别的，通常说红黑树是统计性能更优的树结构。<br>为什么说统计性能更优呢？因为若是单纯的读操作，AVL树的性能比红黑树强一些，红黑树不是严格的平衡树，它是保持“黑平衡”的树。对于红黑树，最坏的情况，是树中最左侧的节点的左子树都是红色的节点，即对应2-3树中的“3节点”，所以这时红黑树的高度就是2logn（除了logn个黑色节点外，还有logn个红色节点），红黑树要比AVL树要高一些。所以从单纯的查询性能来说，红黑树的性能并没有AVL树强。<br>对于插入删除操作来说，红黑树相比于AVL树减少了左旋转或右旋转的次数，所以红黑树的插入删除的性能比AVL树强一些。<br>综合增删改查各方面的性能，红黑树的综合性能比较高。  </p><h2 id="五、红黑树的应用"><a href="#五、红黑树的应用" class="headerlink" title="五、红黑树的应用"></a>五、红黑树的应用</h2><ol><li>Java中的TreeMap，Java8中HashMap的TreeNode节点采用了红黑树实现  </li><li>C++中，STL的map和set也应用了红黑树</li><li>Linux中完全公平调度算法CFS(Completely Fair Schedule)</li><li>用红黑树管理进程控制块epoll在内核中的实现，用红黑树管理事件块</li><li>Nginx中，用红黑树管理timer等   </li></ol><hr><p>这次的分享，主要对红黑树的性质以及向红黑树中插入、删除元素进行分析，对于红黑树的应用并没有很深入的进行研究，如上所述的几种红黑树的应用，也只是了解，还需要在以后的工作学习中进行完善。以上是本人对红黑树学习的一些成果和心得，记下来让自己所学的知识体系化，也方便日后的复习回顾。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前一段时间组内技术分享，正好趁这个机会好好研究了一下红黑树。在这里写下学习红黑树的一些成果和体会。&lt;/p&gt;
&lt;h2 id=&quot;一、什么是红黑树&quot;&gt;&lt;a href=&quot;#一、什么是红黑树&quot; class=&quot;headerlink&quot; title=&quot;一、什么是红黑树&quot;&gt;&lt;/a&gt;一、什么是
      
    
    </summary>
    
      <category term="数据结构" scheme="http://redmapleren.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="红黑树" scheme="http://redmapleren.com/tags/%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    
  </entry>
  
</feed>
